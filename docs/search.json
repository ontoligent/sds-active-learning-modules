[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS 1001 Active Learning Modules",
    "section": "",
    "text": "Preface\nThis site contains three active learning modules for an introductory undergraduate course on programming for data science.\nThese modules have been developed as part of the Data Science Active Learning Lab (DSALL) project, sponsored by the President and Provost’s Fund for Institutionally Related Research at UVA. The project is headed by Professor Brian Wright, in collaboration with Professor Pete Alonzi, of the School of Data Science at UVA.\n\n\nMotivation and Design\nDSALL is motivated by the observation that active learning approaches (AL) have not been widely applied and tested in data science courses, even though a body of significant research demonstrates the benefits of AL and many instructors of computer science have adopted AL successfully.\nA key element of AL is the design, development, and testing of authentic and transparent assessments.\nAuthentic assignments ask students to either inhabit a role seen in the discipline or do the work of the discipline.\nTransparent assignments explicity state their purpose, tasks, and criteria. Research has shown that transparent assignments improve a wide range of student success metrics, including a sense of belonging which can be a significant factor in the retention of underrepresented student populations, particularly in STEM.\nA major obstacle to creating authentic and transparent active learning assessments is the time and effort required to develop, implement, and test them. DSALL will provide the resources and structure necessary for collaborative course development. The Lab will enable faculty and graduate students to work together to develop and empirically test active learning activities in their data science courses. This will result in the identification and validation of best practices along with practical tools that can be shared broadly and openly across the field of Data Science.\nThe Lab will reduce the time burden on faculty to create effective assessments. More important, it will establish a trusted research framework and tools that have been empirically tested for effectiveness. Such a resource is currently unavailable in data science pedagogy. We also have a unique opportunity, given the newness of the field, to develop cultural norms around teaching that are known to benefit underrepresented groups and first-generation students. This funding will go a long way to advance that effort by establishing a pedological research lab specifically focused on student success in a historically fast-growing field.\n\n\nProject Goals\nIn pursuit of the mission to provide resources to enable faculty to create effective active learning assessments for data science, the project has the following goals.\n\nBe a preeminent resource for empirically tested best practices in data science education.\nEstablish a testing and validation framework for data science oriented active learning tools.\nCreate and socialize teaching norms in data science that are proven to benefit underrepresented groups and first-generation students.\nDevelop and test active learning assessments (labs) specifically for courses in the proposed data science undergraduate major. (Projected courses include the Foundation of Data Science, Foundations of Machine Learning, Computation Probability, Data Science Ethics and Policy, and Data Science Systems.)\nDisseminate open instructional content in accordance with the School of Data Science open access policy and UVA’s Open Scholarship agreement."
  },
  {
    "objectID": "rubric.html#summer-2023",
    "href": "rubric.html#summer-2023",
    "title": "Rubric",
    "section": "Summer 2023",
    "text": "Summer 2023\nThe goal of the summer is for each faculty member to create three implementable active learning sessions that can be embedded into classes in the next academic year.\nThese active learning sessions should include the following materials covering a roughly two-week period:\n\nSummary of the learning objectives for the session.\n\nPre-reading and/or video material.\n\nTwo Active learning lecture sessions and associated material\n\nAssessments – assignments, reflections, quizzes, group work etc.\n\nEvaluation rubrics for learning outcomes.\n\nReview process to encourage retention.\n\nEach of these items are explained in more detail below."
  },
  {
    "objectID": "rubric.html#materials",
    "href": "rubric.html#materials",
    "title": "Rubric",
    "section": "Materials",
    "text": "Materials\n\nLearning Goals\nLearning goals should be the overarching goals of the class to which learning objectives could then align.\nExamples of Learning Goals for a Machine Learning Class might be:\n\nBe able to describe and execute the necessary steps to prepare data for machine learning models.\nDemonstrate understanding of the mathematical and computation machine requirements for several machine learning approaches and when they should be used.\nDemonstrate understanding of effective evaluation methods given different machine learning approaches.\n\n\n\nI. Learning Objectives.\nLearning Session: Data Preparation 1\nLearning Objectives:\n1.1a) Describe the reasons for and effectively demonstrate partitioning a dataset into train, test and tune.\n2.1a) Effectively describe and demonstrate why it is necessary to one-hot encode factor and standardize continuous variables specific to various machine learning models.\n3.1a) Execute and effectively describe dealing with missing data\n\n\nII. Pre-Reading and/or Video Material\nThis should reference specific sections in books known to be of high quality related to the content. I have a tendency to lean more heavily on books that include “theory” explanations aside from simple how-to text given that much of the how-to will be provided in the class.\nVideos can be very simple explaining the topics through presentation materials or code at a high level. I would work to limit the length of videos to 10 minutes or less and if several topics are covered break them into individual video segments. As a technic to consider, I often build a “stop and think” question in the video that I then discuss at the beginning of class to encourage students to watch and engage with the content. I also usually place these videos on YouTube as unlisted, but this does still allow you to track the watch time.\n\n\nIII. Active Learning Sessions\nThe definition of active learning is fairly broad, but in it’s simplest form it suggests that students should not be passive in their learning. This doesn’t eliminate classical lecturing methods but augments them to include directed moments when students are either engaging with each other or with the professor in more robust way than a traditional Q and A session. An example that Pete and I use a lot is “think, pair, share”. This includes use asking a question, having the students think on the answer alone, then discussing with a partner and then finally sharing with the class as a team. A good book on methods on Teaching Methods provided by CTE is Teaching at its Best by Linda B. Nelson, I’ve got a copy and can purchased more if needed (also please feel free to share other references).\nAs a reference I found this quote from a 2021 paper focused on developing a framework for active learning helpful: “To clarify, we synthesized a working definition of active learning that operates within an elaborative framework, which we call the construction-of-understanding ecosystem. A cornerstone of this framework is that undergraduate learners should be active agents during instruction and that the social construction of meaning plays an important role for many learners, above and beyond their individual cognitive construction of knowledge.”\nThe article is available here: https://journals.sagepub.com/doi/pdf/10.1177/1529100620973974\n\n\nIV. Assessments\nAssessments can be the hardest and potentially the most time-consuming portion of course materials. The traditional path in most Data Science oriented classes is an assessment that focuses on implementing a method in code. I would encourage you to continue this practice but also consider adding written or verbal approaches to evaluating learning. This might include prompts in the coding assessments that require further written explanations or reflections on what was the most challenging/enjoyable portion of the assignment or what areas the students believe they need more practice. This information can then be used in a follow-up session that highlights the areas that a majority of students saw as needing more coverage. It is also important to create clear expectations on how the assessment will be evaluated and what the expectations are for the assessment. Below is an example assessment Pete developed for the DS 1001, though not a coding-based assessment the general structure is still relevant.\n\n\nV. Evaluation rubrics for learning outcomes\nThis step can likely be included in the development of assessments but having it as a standalone emphasizes the need for thoughtful design.\nThe goal here should be evaluation measures tailored to the assessments but also universal enough to be used in a standard lecture format.\nMeaning that the rubrics will be included as part of the experimental design to assess the variances in learning that occurs in an active learning environment when compared to a lecture format.\nIn the above example the quality of answers to the final question, “How do the answers to the questions make you feel as it relates to the presence of data driven technologies in our everyday lives?”, could be a focus on the evaluation rubric as it relates to the specific learning outcome around “understanding the growing influence of data on society”.\n\n\nVI. Review process to encourage retention – The idea here is to\nnot compartmentalize the learning objectives but blend them together from week to week to help reinforce the topics throughout the semesters.\nOne method example is to have quizzes that include questions from all weeks in the class not just the current topic. I think for this use case, simple direct sessions that are short in nature, 10-15 minutes, that review topics from the session makes more sense.\nExamples might include a guided back and forth on the key topics from the previous week or a team assignment that is short in nature but requires the students to pull previous information forward.\nIf the previous week’s topic was Decision Trees, I’ve shown some code and an image of DT in class that had three errors and ask the students to find and describe the errors in 10 minutes, as an example, before moving into the new session for the week."
  },
  {
    "objectID": "rubric.html#additional-notes",
    "href": "rubric.html#additional-notes",
    "title": "Rubric",
    "section": "Additional Notes",
    "text": "Additional Notes\n\nWe want to publish these materials online, so when building please consider the goal is to make the materials publicly available.\nWe are also hoping to “empirically” test these in a classroom in the Spring of 24, so also be thinking about the development of non-active learning materials and where best to measure results.\nYou’ve got great ideas, this is just a framework, so feel free to move as you see fit.\nThis process should be useful for future and current SDS faculty. So, keep an eye on the ideal that we are in some ways culture building/establishing best practices, which I hope gets noticed.\nPete and I will create a Team site with folders for your content and as a placeholder for documentation on the project. You do not need to use these folders, just an option."
  },
  {
    "objectID": "rubric.html#appendix-look-rubric-for-assessment-design",
    "href": "rubric.html#appendix-look-rubric-for-assessment-design",
    "title": "Rubric",
    "section": "Appendix: LOOK Rubric for Assessment Design",
    "text": "Appendix: LOOK Rubric for Assessment Design\nDS 1001 – Spring 2023 - Professors Alonzi & Wright\nDue Date Target: Noon, April 28; Due date final: Noon, May 10 (last day of reading days)\nSubmission format: File upload to canvas\nIndividual Assignment\nGeneral Description: This assignment is all about understanding the systems behind popular social media and content apps. You will select a popular app, like Instagram or Netflix, and do a deep dive on the systems behind it that keep it running. Then you will produce a short report detailing the goal of the app, the software needs to make it work, and the hardware required to make it so. This will focus on the business side. Imagine you are the Chief Data and Technical officer for the company and producing a report for the Chief Executive and Operations officers.\nPreparatory Assignments: READ #7-9 and Labs #7-9.\nWhy am I doing this? In the systems portion of this course, we have been studying hardware and software as well as understanding the scale involved. This assignment puts you in the position of a company that delivers a product at scale through an app. You will need to understand the goal of the company and then the necessary software and hardware to make that happen. This process of studying a company and thinking through their needs will reinforce the learning about hardware, software, and scale.\n\nLO: Identify the hardware and software components of a computer and describe their function\nLO: Describe the different scales of computer operation\n\nWhat am I going to do? First you will select a company to study, choosing from the list of Instagram, Facebook, Twitter, or Netflix (if there is another you would like to do get clearance from a professor first). Once you have that chosen you will figure out what it takes to power their app. Put another way you will determine the goal, not the business goal of “make more money”, but the technical goal. For example, Netflix streams video content. Then you will research the software and hardware needs of the company to achieve that goal. Finally once you have done that research you will produce a short report detailing the various components.\nTips for success:\n\nPick an app that you use.\nTake this opportunity to learn more about something you use, be curious.\nOften apps are very different in different locations, for this assignment you can simplify and stick to the US market.\nThink about yourself and the goal of college. What software do you need to use? What hardware does that software require? Taking a few minutes to think that out can help focus you for the assignment.\n\nHow will I know I have succeeded? I will meet spec when I follow the criteria in this rubric.\n\n\n\nSpec Category\nSpec Details\n\n\n\n\nFormatting\n\nSubmit a single PDF.\n\nGive it a header stating the assignment.\n\n\n\n“Look Ahead assignment – Systems.”\nName, course, date\n\n3 page maximum, including tables and figures.\nExecutive Summary\nGoal statement\nSoftware requirements\nHardware requirements\nReferences\n\n\n\nExecutive Summary\n\nGoal: A short declarative sentence or two describing the contents of the report and the major takeaways.\nList the components of the report.\nState the key figures and scale.\nHighlight any major takeaways the reader should look out for.\n\n\n\n\nGoal Statement\n\nGoal: This is a short paragraph describing the technical goal the app is trying to achieve, for example Netflix streams video.\nInclude the scale involved, how much data is stored, how much computing power is needed, etc.\nThis is not a detailed description, just a coherent statement of the mission\n\n\n\nSoftware Requirements\n\nGoal: Present a detailed description of the software used to achieve the goal.\nThis is a major section of the assignment and is about half of the length of the assignment.\nMention the major software components and their needs.\nInclude a table summarizing the software needs.\nInclude a visualization of the software needs\n\n\n\nHardware Requirements\n\nGoal: Present a detailed description of the hardware used to achieve the goal.\nThis is a major section of the assignment and is about half of the length of the assignment.\nMention the major hardware components of the system.\nInclude a table summarizing the hardware.\nInclude a visualization summarizing the hardware.\n\n\n\nReferences\n\nAll references should be listed at the end of the document\nUse IEEE Documentation style (link)\n\n\n\n\nAcknowledgements: Special thanks to Jess Taggart from UVA CTE for coaching us. This structure is from Streifer & Palmer (2020)."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html",
    "title": "Module: Using Python",
    "section": "",
    "text": "Learning Goals\nAfter completing this module, the student should:\nIn terms of specific knowledge, skills, and abilities, after completing this module students should be able to:\nIn this activity, you will run Python from the command line and become acquainted with its most basic mode of operation.\nTo get started, log onto the Rivanna shell and move into in the course directory you created for this class.\nNow that we have run Python on Rivanna from the command line, let’s try it using a Jupyter Notebook.\nGo the OnDemand site to access Rivanna. As a reminder, the URL is https://rivanna-portal.hpc.virginia.edu/.\nFrom the Interactive Apps menu, select JupyterLab and fill out the form to initiate a new session. Your form should have the following values:\nOnce the session is ready, launch the notebook.\nOnce you are in the notebook, use file system tab on the left to get to the directory of your personal assessments repo. Remember, you created two repos for this class — one for course content from the instructor, and one for your own course work. Use the latter for this exercise.\nIn a code cell in the notebook, enter the code to print \"Hello, World!\", and run the cell.\nSave your notebook as hello-world.ipynb.\nQ1. Which of the following are valid ways to run lines of Python code?\nA. From within the GitHub website, by clicking on a Jupyter notebook.\nB. From the command line, by typing in python, pressing return, and then interactively entering the lines.\nC. From within a code cell in a Jupyter notebook running on Jupyter Lab.\nD. From a text file, with a .py extension. as an argument to calling Python from the command line."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#which-python",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#which-python",
    "title": "Module: Using Python",
    "section": "Which Python?",
    "text": "Which Python?\nOnce you are in Rivanna, you will want to know which version of Python you have installed as the default.\nTo find out, from the command line type:\nwhich python\nThis will show you the “path” to a python interpreter. For example:\n\nIf you do not see “anaconda” in that path, then run the following command:\nmodule load anaconda\nThis will update your environment to use Anaconda’s distribution of Python.\nAfter running the command, enter the command to see which pythion is being used to confirm that it is the one from Ancaconda."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#aside",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#aside",
    "title": "Module: Using Python",
    "section": "Aside",
    "text": "Aside\nNote that you can use module to run other programs on your Rivanna account.\nType module list to see which programs have already been installed on your account.\nType module spider to see all the programs you can install."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#the-python-interactive-shell",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#the-python-interactive-shell",
    "title": "Module: Using Python",
    "section": "The Python Interactive Shell",
    "text": "The Python Interactive Shell\nFrom the command line, enter python\nYou should get the Python Shell:\n\nThis is also called the Python standard REPL, which stands for “Read-Eval-Print Loop”.\nMake sure you see that you are using version 3 of Python.\nIf you see Python 2, exit the shell by entering quit() and try again by entering python3 at the command line.\nAt the >>> prompt type print(\"Hello, World!\") and press return.\nIf you’ve never used Python, you’ve just completed an important ritual. If you have used Python, well, you did it again :-)"
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#try-this",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#try-this",
    "title": "Module: Using Python",
    "section": "Try this",
    "text": "Try this\nNow, enter following line at the prompt and press return:\nimport this\nWhat do you see?\nTo exit the Python Shell, enter quit() or exit() and hit return."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#running-python-files",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#running-python-files",
    "title": "Module: Using Python",
    "section": "Running Python Files",
    "text": "Running Python Files\nNow create a file called hello.py using the command line editor nano. Enter the same commands you used above.\nThen run it from the command line by directly invoking the Python interpreter python."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html",
    "title": "Module: Variables and Data",
    "section": "",
    "text": "Learning Goals\nFor reference: - Built-in Types (Official)\nClick on the link below to open a web page that contains a slide deck with exercises.\nFor each exercise, read the prompt and attempt to provide an answer, usually in the form of code.\nSee the answers by clicking the down arrow in the lower right corner.\nGo to the next exercise prompt by clicking on the right arrow.\nCreate a new notebook to store your work.\nExercise Slides\nTo finish this module, complete this homework assignment."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#reading-data-and-code",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#reading-data-and-code",
    "title": "Module: Variables and Data",
    "section": "Reading: Data and Code",
    "text": "Reading: Data and Code\nCode should be simple\nAn important principle for writing effective and intelligible code is that code should be simple — to quote Einstein, as simple as possible but no simpler.\n\nA contributing factor to code simplicity is how it is related to the data it is designed to process.\nThis relationship depends largely on how the data are structured.\nA program is always written with data in mind — what kind of data it is and how it is structured.\n\nSimplicity of code follows from the structure of data\nThere is a view among programmers which, although not orthodoxy, is commonplace.\n\nIt is the idea that the complexity of a program — its algorithms — is a function of the quality of the data structure it processes.\nIf a data structure is not well designed, algorithms may be excessively complex and hard to understand.\nHowever if a data structure is well designed, the algorithms that process them are more robust and intelligible.\n\nSupporting References\nConsider these quotes cited in an essay on Data Structures. by Igor Budasov, reproduced here:\nHere’s a quote from Linus Torvalds in 2006:\n\nI’m a huge proponent of designing your code around the data, rather than the other way around, and I think it’s one of the reasons git has been fairly successful . . . I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his [sic] code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\n\nWhich sounds a lot like Eric Raymond’s “Rule of Representation” from 2003:\n\nFold knowledge into data, so program logic can be stupid and robust.\n\nWhich was just his summary of ideas like this one from Rob Pike in 1989:\n\nData dominates. If you’ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.\n\nWhich cites Fred Brooks from 1975:\n\nRepresentation is the Essence of Programming\n\nBeyond craftsmanship lies invention, and it is here that lean, spare, fast programs are born. Almost always these are the result of strategic breakthrough rather than tactical cleverness. Sometimes the strategic breakthrough will be a new algorithm, such as the Cooley-Tukey Fast Fourier Transform or the substitution of an n log n sort for an n 2 set of comparisons.\n\n\nMuch more often, strategic breakthrough will come from redoing the representation of the data or tables. This is where the heart of your program lies. Show me your flowcharts and conceal your tables, and I shall be continued to be mystified. Show me your tables, and I won’t usually need your flowcharts; they’ll be obvious."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#reading-python-object-types",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#reading-python-object-types",
    "title": "Module: Variables and Data",
    "section": "Reading: Python Object Types",
    "text": "Reading: Python Object Types\nPython is organized into a hierarchy of object types. Sometimes, these are just call types.\nObjects are the basic unit out of which the language is constructed.\nWe’ll learn about objects later – what they are and how to create your own – but for now just understand that they have two main things associated with them:\n\nFirst, they can contain data.\nSecond, they can have behaviors, frequently in relation to the data they contain.\n\n\n\nData Types and Data Structures\nData types and data structures are kinds of objects.\nData types are atomic — they don’t contain other data types.\nData structures contain data types organized in a certain way.\nData Types\n\n\n\nname\ntype\nliteral\n\n\n\n\nint\ninteger\n1\n\n\nstr\nstring\n\"1\", '1'\n\n\nfloat\nfloating point (real)\n1.\n\n\ncomplex\ncomplex\n1j (imaginary component)\n\n\nbool\nboolean\nTrue\n\n\n\nData Structures\n\n\n\nname\nmutable\nconstructor\n\n\n\n\ntuple\nno\n(), tuple()\n\n\nlist\nyes\n[], list()\n\n\ndict\nyes\n{} with key/value pairs, dict()\n\n\nset\nyes\n{} with single values, set()"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#notebooks",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#notebooks",
    "title": "Module: Variables and Data",
    "section": "Notebooks",
    "text": "Notebooks\n\nNumbers\nBooleans\nStrings\nStructures"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q1",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q1",
    "title": "Module: Variables and Data",
    "section": "Q1",
    "text": "Q1\n(1 point) Which of the following are valid ways to run lines of Python code?\nA. From within the GitHub website, by clicking on a Jupyter notebook.\nB. From the command line, by typing in python, pressing return, and then interactively entering the lines.\nC. From within a code cell in a Jupyter notebook running on Jupyter Lab.\nD. From a text file, with a .py extension. as an argument to calling Python from the command line."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q2",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q2",
    "title": "Module: Variables and Data",
    "section": "Q2",
    "text": "Q2\n(1 point) What statement best describes the difference between data types and data structures?\nA. There is no real difference; the expressions are interchangeable.\nB. Data types refer to primitive kinds of data, whereas data structures organize data types into collections with specific organizational properties.\nC. Data types refer to built-in objects, whereas data structures are imported.\nD. Data types don’t have associated operators, whereas data types do."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q3",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q3",
    "title": "Module: Variables and Data",
    "section": "Q3",
    "text": "Q3\n(1 point) Which of the following items have corresponding Python data types?\nA. Integers\nB. Booleans\nC. Characters (e.g. individual letters)\nD. Reals"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q4",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q4",
    "title": "Module: Variables and Data",
    "section": "Q4",
    "text": "Q4\n(1 point) What built-in Python function returns the object type (i.e. class name) of a value stored in the Python variable x?\nA. class(x)\nB. type(x)\nC. id(x)\nD. ord(x)"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q5",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q5",
    "title": "Module: Variables and Data",
    "section": "Q5",
    "text": "Q5\n(1 point) Which of the following literals would Python interpret as integers? A. 1\nB. 1.\nC. “1”\nD. +1"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q6",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q6",
    "title": "Module: Variables and Data",
    "section": "Q6",
    "text": "Q6\n(1 point) What value does the following expression return: int(1.) == 1\nTrue\nFalse"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q7",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q7",
    "title": "Module: Variables and Data",
    "section": "Q7",
    "text": "Q7\n(1 point) Which are valid constructors of a Python list named x?\nA. x = []\nB. x = list()\nC. x = ()\nD. x = {}"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q8",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q8",
    "title": "Module: Variables and Data",
    "section": "Q8",
    "text": "Q8\n(1 point) Given the list x = [1, 2, 4, 8] what will the expression the following evaluate to? x[1:4]\nA. [1, 2, 4, 8]\nB. [2, 4, 8]\nC. [1, 2, 4]\nD. [1, 4]"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q9",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q9",
    "title": "Module: Variables and Data",
    "section": "Q9",
    "text": "Q9\n(1 point) What value will the following expression evaluate to? [1, 2, 4] * 2\nA. [2, 4, 8]\nB. None # The * operator does not work with lists\nC. [1, 2, 4, 1, 2, 4]\nD. [1, 2, 4, 2]"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q10",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q10",
    "title": "Module: Variables and Data",
    "section": "Q10",
    "text": "Q10\n(1 point) Which of the following are built-in Python data structures?\nA. list\nB. dict\nC. set\nD. tuple"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-00-Goals.html#learning-goals",
    "href": "modules/M03_ControlStructures/M03-00-Goals.html#learning-goals",
    "title": "Goals and Outcomes",
    "section": "Learning Goals",
    "text": "Learning Goals\nAfter completing this module, the student should:\n\nUnderstand the difference between statements and expressions in Python.\nKnow the basic control structures in Python.\nUnderstand how conditional logic is used in these structures.\nKnow about iterators.\nUnderstand comprehensions in Python and know how to use them."
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-00-Goals.html#learning-outcomes",
    "href": "modules/M03_ControlStructures/M03-00-Goals.html#learning-outcomes",
    "title": "Goals and Outcomes",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nIn terms of specific knowledge, skills, and abilities, after completing this module students should be able to:\n\nRecognize primary control structures available in Python and their basic use cases.\nWrite comprehensions for each of Python’s list-like data structures.\nRecognize when iterators are used by Python functions (such as open()).\nUnderstand basic conditional logic statements and their role in designing data flow in a program."
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-01-Readings.html#optional",
    "href": "modules/M03_ControlStructures/M03-01-Readings.html#optional",
    "title": "Readings",
    "section": "Optional",
    "text": "Optional\n\nVariables, Expressions, Statements, Types (Python Notes)\nMore Control Flow Tools (Python Docs)\nIf … Then (W3S)\nIterators (GFG)"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-01-Readings.html#reading-values-variables-expressions-and-statements",
    "href": "modules/M03_ControlStructures/M03-01-Readings.html#reading-values-variables-expressions-and-statements",
    "title": "Readings",
    "section": "Reading: Values, Variables, Expressions, and Statements",
    "text": "Reading: Values, Variables, Expressions, and Statements\nDefinitions\n\nValues: Raw data elements represented in a program, e.g. numbers and strings.\nVariables: Names to which values are assigned.\nExpressions: Combinations of values, variables, operators, functions, and other expressions that evaluate to a value.\nStatements: Groupings of expressions that produce some result. Statements do things.\n\nStatement Types\nSee Statement Types in Lutz."
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "href": "modules/M03_ControlStructures/M03-02-IterablesAndIterators.html",
    "title": "NB: On Iterables and Iterators",
    "section": "",
    "text": "Defining Iterables and Iterators\nIterable objects or iterables can return elements one at a time.\nAn iterator is an object that iterates over iterable objects such as sets, lists, tuples, dictionaries, and strings.\nIteration can be implemented: - with a for loops - with the next() method\nNext, we show examples for various iterables.\nWe iterated over a list. Next we will illustrate for other iterables: str, tuple, set, dict\nlists, tuples, and strings are sequences. Sequences are designed so that elements come out of them in the same order they were put in.\nSets and dictionaries are not sequences, since they don’t keep elements in order. They are called collections. The ordering of the items is arbitrary.\nNOTE: This has changed for dictionaries in Python 3.7: > the insertion-order preservation nature of dict objects has been declared to be an official part of the Python language spec.\n– What’s New in Python 3.7\niterating using for\niterating using iter() and next()\niterating using for\niterating using iter() and next()\niterating using for\niterating using iter() and next()\niterating using for\nAlternatively, keys and values can be extracted from the dict by: - looping over the keys - extract the value by indexing into the dict with the key\niterating using for\nIf you just want to iterate for a known number of times, use range().\nVery often you will want to know iteration number you are on in a loop.\nThis can be used to name files or dict keys, for example.\nenumerate() will return the index and key for each iteration.\nIterations can be nested!\nThis works well with nested data structures, like dicts within dicts.\nThis is basically how JSON files are handled, BTW.\nBe careful, though – these can get deep and complicated.\niterating using iter() and next()"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "href": "modules/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-for",
    "title": "NB: On Iterables and Iterators",
    "section": "iterating using for",
    "text": "iterating using for\n\ntokens = ['living room', 'was', 'quite', 'large']\n\nfor tok in tokens:\n    print(tok)\n\nliving room\nwas\nquite\nlarge"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-iter-and-next",
    "href": "modules/M03_ControlStructures/M03-02-IterablesAndIterators.html#iterating-using-iter-and-next",
    "title": "NB: On Iterables and Iterators",
    "section": "iterating using iter() and next()",
    "text": "iterating using iter() and next()\niter() gets an iterator. Pops out a value each time it’s used.\nnext() gets the next item from the iterator\n\ntokens = ['living room','was','quite','large']\nmyit = iter(tokens)\nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \nprint(next(myit)) \n\nliving room\nwas\nquite\nlarge\n\n\nCalling next() when the iterator has reached the end of the list produces an exception:\n\nprint(next(myit))\n\nStopIteration: \n\n\nNext, look at the type of the iterator, and the documentation\n\ntype(myit)\n\nlist_iterator\n\n\n\n# help(myit)\n\n\nhelp(next)\n\nHelp on built-in function next in module builtins:\n\nnext(...)\n    next(iterator[, default])\n    \n    Return the next item from the iterator. If default is given and the iterator\n    is exhausted, it is returned instead of raising StopIteration.\n\n\n\nNote that for implicitly creates an iterator and executes next() on each loop iteration. This is best way to iterate through a list-like object."
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-03-ControlStructures.html#introducing-control-structures",
    "href": "modules/M03_ControlStructures/M03-03-ControlStructures.html#introducing-control-structures",
    "title": "NB: On Control Structures",
    "section": "Introducing Control Structures",
    "text": "Introducing Control Structures\nPython includes structures to control the flow of a program:\n\nconditions (if, else)\nloops\n\nwhile-loop\nExecute statements while a condition is true\nfor-loop\nIterates over a iterable object (list, tuple, dict, set, string)"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-03-ControlStructures.html#indentation",
    "href": "modules/M03_ControlStructures/M03-03-ControlStructures.html#indentation",
    "title": "NB: On Control Structures",
    "section": "Indentation",
    "text": "Indentation\nThis is where Python differs from most languages. To define control structures,\nand functional blocks of code in general, most languages use either characters like braces { and } or key words like IF ... END IF.\nPython uses tabs – spaces, actually – to signify logical blocks off code.\nIt is therefore imperative to understand and get a feel for indentation. For more information, see Lutz 2019, “A Tale of Two Ifs.”"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-03-ControlStructures.html#conditions",
    "href": "modules/M03_ControlStructures/M03-03-ControlStructures.html#conditions",
    "title": "NB: On Control Structures",
    "section": "Conditions",
    "text": "Conditions\n\nif and else can be used for conditional processing.\n\nval = -2\n\nif val >= 0:\n    print(val)\nelse:\n    print(-val)\n\n2\n\n\n\n\nelif\nelif is reached when the previous statements are not.\n\nval = -2\n\nif -10 < val < -5:\n    print('bucket 1')\nelif -5 <= val < -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\n\nbucket 3\n\n\n\n\nelse\nelse can be used as a catchall\n\nval = 5\n\nif -10 < val < -5:\n    print('bucket 1')\nelif -5 <= val < -2:\n    print('bucket 2')\nelif val == -2:\n    print('bucket 3')\nelse:\n    print('bucket 4')\n\nbucket 4\n\n\n\n\nif and else as one-liners\n\nx = 3\nprint('odd') if x % 2 == 1 else print('even')\n\nodd\n\n\nNotice == for checking the condition x % 2 == 1.\nboth if and else are required. This breaks:\n\nprint('odd') if x % 2 == 1\n\nSyntaxError: invalid syntax (471325368.py, line 1)\n\n\n\n\nUsing multiple conditions\nIf statements can be complex combinations of expressions.\nUse parentheses carefully, to keep order of operations correct.\n\n## correct\n\nval = 2\n\nif (-2 < val < 2) or (val > 10):\n    print('bucket 1')\nelse:\n    print('bucket 2')\n\nbucket 2\n\n\n\n## incorrect - misplaced parenthesis\n\nif (-2 < val) < 2 or val > 10:\n    print('bucket 1')\nelse:\n    print('bucket 2')\n\nbucket 1\n\n\nand this is because True < 2, as True is cast to integer value 1\nthis is not the desired result…but does it make sense?"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-03-ControlStructures.html#loops",
    "href": "modules/M03_ControlStructures/M03-03-ControlStructures.html#loops",
    "title": "NB: On Control Structures",
    "section": "Loops",
    "text": "Loops\n\nwhile\nWhat does this print?\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\nprint(ix)\n\n16\n\n\n\n\nbreak to exit the loop altogether\nsometimes you want to quit the loop early, if some condition is met.\nuses if-statement\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\n    if ix == 4:\n        break\nprint(ix)\n\n4\n\n\nThe break causes the loop to end early\n\n\ncontinue to stop the current iteration\nsometimes you want to introduce skipping behavior in the loop.\nuses if-statement\n\nix = 1\nwhile ix < 10:\n    ix = ix * 2\n    if ix == 4:\n        print('skipping 4...')\n        continue\n    print(ix)\n\n2\nskipping 4...\n8\n16\n\n\nThe continue causes the loop to skip printing 4\n\n\nfor\niterate over an iterable\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    city = city.lower()\n    print(city)\n\ncharlottesville\nnew york\nsf\nbos\nla\n\n\nquit early if SF reached, using break\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    if city == 'SF':\n        break\n    city = city.lower()\n    print(city)\n\ncharlottesville\nnew york\n\n\nskip over SF if reached, using continue\n\ncities = ['Charlottesville','New York','SF','BOS','LA']\n\nfor city in cities:\n    if city == 'SF':\n        continue\n    city = city.lower()\n    print(city)\n\ncharlottesville\nnew york\nbos\nla"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-03-ControlStructures.html#while-vs-for",
    "href": "modules/M03_ControlStructures/M03-03-ControlStructures.html#while-vs-for",
    "title": "NB: On Control Structures",
    "section": "while vs for",
    "text": "while vs for\nFor loops are used to loop through a list of values or an operation in which the number of iterations is known in advance.\nWhile loops are when you don’t know how many interations it will take – you are depending on some condition to be met.\nIt is possible for while loops to be unending, for example:\nwhile 1:\n    print(\"This is so annoying\")"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-04-Comprehensions.html",
    "href": "modules/M03_ControlStructures/M03-04-Comprehensions.html",
    "title": "NB: On Comprehensions",
    "section": "",
    "text": "List Comprehensions\nConsider this task: check if each integer in a list is odd.\nWithout list comprehensions, you might do this:\nComprehensions provide a concise method for iterating over any list-like object to a new list like object.\nThere are comprehensions for each list-like object: * List comprehensions * Dictionary comprehensions * Tuple comprehensions * Set comprehensions\nComprehensions are essentially very concise for loops. They are compact visually, but they also are more efficient than loops.\nAll comprehensions have the form:\nlistlike_result = [ expression + context]\nThe type of comprehension is indicated by the use of enclosing pairs, just like anonymous constructors:\nExpression defines what to do with each element in the list. This has the structure of the kind of comprehension. So, dictionary comprehension expressions take the form k:v while sets use v.\nContext defines which list elements to select. The context always consists of an arbitrary number of for and if statements.\nDictionary comprehensions provide a concise method for iterating over a dictionary to create a new dictionary.\nThis is common when data is structured as key-value pairs, and we’d like to filter the dict.\nWe build the key-value pairs using key:model_arch[key], where the key indexes into the dict model_arch"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-04-Comprehensions.html#check-if-odd",
    "href": "modules/M03_ControlStructures/M03-04-Comprehensions.html#check-if-odd",
    "title": "NB: On Comprehensions",
    "section": "Check if Odd",
    "text": "Check if Odd\n\nvals = [1,5,6,8,12,15]\nis_odd = []\n\nfor val in vals:   \n    if val % 2: # if remainder is one, val is odd\n        is_odd.append(True)\n    else:       # else it's not odd\n        is_odd.append(False)\n\nis_odd\n\n[True, True, False, False, False, True]\n\n\nThe code loops over each value in the list, checks the condition, and appends to a new list.\nThe code works, but it’s lengthy compared to a list comprehension.\nThe approach takes extra time to write and understand.\nLet’s solve with a list comprehension:\n\nis_odd = [val % 2 == 1 for val in vals]\nis_odd\n\n[True, True, False, False, False, True]\n\n\nMuch shorter, and if you understand the syntax, quicker to interpet.\nNote the in-place use of an expression.\nNow let’s discuss the syntax."
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-04-Comprehensions.html#stop-word-remover",
    "href": "modules/M03_ControlStructures/M03-04-Comprehensions.html#stop-word-remover",
    "title": "NB: On Comprehensions",
    "section": "Stop Word Remover",
    "text": "Stop Word Remover\nCreate list of words, and list of stop words.\nFilter out the stop words (considered not important).\n\nstop_words = ['a','am','an','i','the','of']\nwords      = ['i','am','not','a','fan','of','the','film']\n\nclean_words = [wd for wd in words if wd not in stop_words]\nclean_words\n\n['not', 'fan', 'film']\n\n\nplacing the color-coding on the list comprehension:\n[ wd   for wd in words  if wd not in stop_words]\n\nthe expression is very simple: wd. keep the word if meets condition\nthe condition does the work: if the word isn’t in list of stop words, keep it\n\nSide note: This task can also be done with sets, if you are not concerned with mulitple instances of the same word:\n\ns1 = set(stop_words)\ns2 = set(words)\ns3 = s2 - s1\n\n\ns3\n\n{'fan', 'film', 'not'}"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-04-Comprehensions.html#select-tokens-containing-units",
    "href": "modules/M03_ControlStructures/M03-04-Comprehensions.html#select-tokens-containing-units",
    "title": "NB: On Comprehensions",
    "section": "Select Tokens Containing Units",
    "text": "Select Tokens Containing Units\nGiven a list of measurements, retain elements containing mmHg (millimeters of mercury)\n\nunits = 'mmHg'\nmeasures = ['20', '115mmHg', '5mg', '10 mg', '7.5dl', '120 mmHg']\nmeas_mmhg = [meas for meas in measures if units in meas]\n\n\nmeas_mmhg   \n\n['115mmHg', '120 mmHg']\n\n\nFiltering on two conditions\n\nunits1 = 'mmHg'\nunits2 = 'dl'\nmeas_mmhg_dl = [meas for meas in measures if units1 in meas or units2 in meas]\n\n\nmeas_mmhg_dl\n\n['115mmHg', '7.5dl', '120 mmHg']\n\n\nThis can be written differently for clarity:\n\n[meas \n for meas in measures \n if units1 in meas \n or units2 in meas]\n\n['115mmHg', '7.5dl', '120 mmHg']"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q1.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q1.",
    "title": "Quiz",
    "section": "Q1.",
    "text": "Q1.\n(1.0 points) In Python the bodies of if/else statements, for loops, and while loops need to be properly and consistently indented. Is this statement true or false?\nA. True\nB. False"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q2.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q2.",
    "title": "Quiz",
    "section": "Q2.",
    "text": "Q2.\n(1.0 points) It is ________ to embed a for-loop in the body of an if-statement. (Pick an option to complete this sentence that makes the statement true.)\nA. impossible\nB. syntactically incorrect\nC. syntactically correct\nD. syntactically correct but not advised"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q3.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q3.",
    "title": "Quiz",
    "section": "Q3.",
    "text": "Q3.\n(1.0 points) Which of the following statements is true about ?else? and elif in the context of Python control structures?\nA. elif needs a condition, whereas ?else? does not\nB. elif and ?else? are both used as catch-alls after a sequence of if-statements where all conditions are not met\nC. elif is a general catch-all whereas ?else? is not\nD. elif and ?else? cannot show up together in a code segment used for conditional processing"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q4.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q4.",
    "title": "Quiz",
    "section": "Q4.",
    "text": "Q4.\n(1.0 points) Review the following code snippet. What is the output?\nvar1 = 1\nwhile var1 < 10:\n    var1 = var1 * 2\n    if var1 == 4:\n        continue\n    if var1 == 6:\n        break\nprint(var1)\nA. 2\nB. 4\nC. 6\nD. 16"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q5.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q5.",
    "title": "Quiz",
    "section": "Q5.",
    "text": "Q5.\n(1.0 points) Generally, a for-loop is used when the number of iterations is known ahead of time (e.g. iterating over an iterable like a list of items or iterating a specific number of times) whereas a while-loop will iterate until a particular condition is met and it might not be apparent how many iterations will occur. Is this statement true or false?\nA. True\nB. False"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q6.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q6.",
    "title": "Quiz",
    "section": "Q6.",
    "text": "Q6.\n(1.0 points) What is the output of the following code, if \\(n = 10345\\)?\nlength = 0\nwhile n > 0:\n n //= 10 # this is equivalent to n = n // 10\n length += 1\nprint(length)\nA. 0\nB. 3\nC. 4\nD. 5"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q7.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q7.",
    "title": "Quiz",
    "section": "Q7.",
    "text": "Q7.\n(1.0 points) An iterator knows when it is at the end of the iterable object and therefore, you can call the next() method (which gets the next item from the iterator) as many times as you want, and it will not be a problem since it will always stop once it runs out of items to retrieve. Is this statement true or false?\n\nA. True\nB. False"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q8.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q8.",
    "title": "Quiz",
    "section": "Q8.",
    "text": "Q8.\n(1.0 points)\nWhat does the following code print?\npowers = [2,4,8,16,32,64]\nsome_vals = [int(x/2) for x in powers if x < 10]\nprint(some_vals)\nA. [2, 4, 8]\nB. [1, 2, 4]\nC. [1, 2, 4, 8, 16, 32]\nD. none of these"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q9.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q9.",
    "title": "Quiz",
    "section": "Q9.",
    "text": "Q9.\n(1.0 points)\nWhat does the following code print?\ncodedMessage = '.GERYEXAKTL!'\ndecodedMessage = [char for index, char in enumerate(codedMessage)\n if (index % 2 == 1)]\nprint(decodedMessage)\nA. ['.','G','E','R','Y','E','X','A','K','T','L','!']\nB. ['G']\nC. ['G', 'R', 'E', 'A', 'T', '!']\nD. ['.', 'E', 'Y', 'X', 'K', 'L']\nE. ['G', 'R', 'E', 'Y', '!']"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-Quiz.html#q10.",
    "href": "modules/M03_ControlStructures/M03-Quiz.html#q10.",
    "title": "Quiz",
    "section": "Q10.",
    "text": "Q10.\n(1.0 points) Which of these are true statements about list comprehensions? Select all that apply:\nA. they produce a list\nB. they must contain a while-loop\nC. they contain a for-loop\nD. they may contain one or more if-statements"
  },
  {
    "objectID": "modules/M03_ControlStructures/M03-HW.html",
    "href": "modules/M03_ControlStructures/M03-HW.html",
    "title": "Homework",
    "section": "",
    "text": "Name:\n\nInstructions\nIn your private course repo on Rivanna, write a Jupyter notebook running Python that performs the numbered tasks below.\nFor each task, create a code cell to perform the task.\nSave your notebook in the M03 directory as hw03.ipynb.\nAdd and commit these files to your repo.\nThen push your commits to your repo on GitHib.\nBe sure to fill out the Student Info block above.\nTo submit your homework, save the notebook as a PDF and upload it to GradeScope, following the instructions.\n12 points\n\n\nTask 1\n(6 points)\nUsing the for loop and if statement control structures, write a script that generates the integers from \\(1\\) to \\(100\\) and does the following things:\n\nIf \\(3\\) is a factor of the number, print Wahoo.\nIf \\(5\\) is a factor of the number, print wah!.\nIf the number meets none of the above conditions, print nothing, not even a line break.\nIf the number meets both of the conditions, print the strings on the same line with no space between them.\nMake sure that the line printed for each iteration in which a condition is met ends with a line break.\nWhen the loop is finished, print the number of times either conidtion was met, i.e. the number of lines that were printed.\n\nHint: You may not need to use elif and else to accomplish these tasks.\n\n# CODE\n\n\n\nTask 2\n(3 points)\nRewrite the for loop as a while loop.\nThis time, only print lines where both conditions are met.\nInclude a final line which prints the number of times both conditions are met.\n\n# CODE\n\n\n\nTask 3\n(3 points)\nWrite a list comprehension that iterates through the integers from \\(1\\) to \\(100\\) and returns a list containing the sum of the boolean values of the two conditions described in Task 1.\n\n# CODE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-00-Goals.html#learning-goals",
    "href": "modules/M04_PythonFunctions/M04-00-Goals.html#learning-goals",
    "title": "Goals and Outcomes",
    "section": "Learning Goals",
    "text": "Learning Goals\nAfter completing this module, the student should:\n\nUnderstand what built-in functions are.\nUnderstand what user-defined functions are and how to create them.\nUndertand the concept of variable scope.\nKnow what lambda functions are how to use them.\nUnderstand some basic principles of function design.\nKnow what function recursion is."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-00-Goals.html#learning-outcomes",
    "href": "modules/M04_PythonFunctions/M04-00-Goals.html#learning-outcomes",
    "title": "Goals and Outcomes",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nIn terms of specific knowledge, skills, and abilities, after completing this module students should be able to:\n\nBe able to use Python’s native and imported functions.\nBe able to write their own functions.\nUnderstand the concept of variable scope and some of the problems that may arise in not paying attention to it.\nBe able to write lambda functions and understand their use cases.\nGrasp basic principles of function design.\nImplement simple recursion functions."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-01-Readings.html#optional",
    "href": "modules/M04_PythonFunctions/M04-01-Readings.html#optional",
    "title": "Readings",
    "section": "Optional",
    "text": "Optional\n\nMcKinney, Python for Data Analysis, Appendix A: Python Language Essentials. Read section on Functions.\nFunctions (W3S)\n\nGlobal and Local Variables (GFG)\n\nLambda Functions (Real Python)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-02-Importing.html",
    "href": "modules/M04_PythonFunctions/M04-02-Importing.html",
    "title": "NB: Importing Functions",
    "section": "",
    "text": "Extra"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-02-Importing.html#importing",
    "href": "modules/M04_PythonFunctions/M04-02-Importing.html#importing",
    "title": "NB: Importing Functions",
    "section": "Importing",
    "text": "Importing\nCalling a function from the “math” library is straightforward:\n\nImport Python’s Math library with the command import math\nCall methods from the imported math object using “dot” notation, that is, .(any parameters).\n\nFor example:\nmath.sqrt(12)\nPut all of your import statements at the very top of your code, before anything else, other than any header comments (which you should have).\nHere are some example math functions:\n\nimport math # Typically best to put this line of code at the TOP of the file\n\n\nmath.sqrt(12)\n\n3.4641016151377544\n\n\n\nmath.floor(2.5) # returns largest whole number less than the argument\n\n2\n\n\nHere’s an example using the random library (a class).\n\nimport random # Typically best to put this line of code at the TOP of the file\n\n\nrandom.random()# will return a number between 0 and 1 \n\n0.3599068479674543\n\n\n\nrandom.randint(1, 100) # this will return a random integer in the range 1-100\n\n18"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-02-Importing.html#importing-specific-functions",
    "href": "modules/M04_PythonFunctions/M04-02-Importing.html#importing-specific-functions",
    "title": "NB: Importing Functions",
    "section": "Importing Specific Functions",
    "text": "Importing Specific Functions\nIf you know what specifics function you are going to use from a library, you can import them directly, like so:\nfrom math import sqrt\nThis has two effects: 1. It reduces the memory used by the library in your program. 2. It allows you to call the function directly, with the object dot notation.\n\nfrom math import sqrt\n\n\nsqrt(99)\n\n9.9498743710662"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-02-Importing.html#aliasing",
    "href": "modules/M04_PythonFunctions/M04-02-Importing.html#aliasing",
    "title": "NB: Importing Functions",
    "section": "Aliasing",
    "text": "Aliasing\nTo avoid having the function name conflict with an existing function in your program,\nyou can alias the imported function like so:\n\nfrom math import sqrt as SquareRoot\n\n\nSquareRoot(65000)\n\n254.95097567963924"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#introduction",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#introduction",
    "title": "NB: Introduction to Functions",
    "section": "Introduction",
    "text": "Introduction\nA function is piece of source code, separate fom the larger program, that performs a specific task.\nThis section of code is given a name and can be called from the main program. It is called by using its given name.\nFunctions are the verbs of a programming language. They signify action, and take subjects and objects (as it were).\nFunctions take input and produce output.\n\nFunction inputs are called both parameters and arguments.\nOutputs are called return values\n\nFunctions are always written with parentheses at the end of their names, e.g.\nlen(some_list)\nInternally, they contain a block of code to do their work.\nOften the producte a transformation … from simple to complex.\nWhen you use a function, we say you call a function. Programmers speak of “function calls” and “callbacks”."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#benefits",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#benefits",
    "title": "NB: Introduction to Functions",
    "section": "Benefits",
    "text": "Benefits\nReduce complex tasks into simpler tasks.\nEliminate duplicate code – no need to re-write, reuse function as needed.\nCode reuse. Once function is written, you can reuse it in any other program.\nDistribute tasks to multiple programmers. For example, each function can be written by someone.\nHide implementation details, i.e. abstraction.\nIncrease code readability.\nImprove debugging by improving traceability. Things are easier to follow; you can jump from function to function."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#built-in-functions",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#built-in-functions",
    "title": "NB: Introduction to Functions",
    "section": "Built-in Functions",
    "text": "Built-in Functions\nPython provides many built-in functions. See Python built-in functions.\nWe’ve looked at many of these already.\nThese are functions that are available to use any time your are running Python.\nTo take one simple example, this is a built-in function: bool().\nTakes an argument \\(x\\) and returns a boolean value, i.e. True or False.\n\nbool(0), bool(500)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#imported-functions",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#imported-functions",
    "title": "NB: Introduction to Functions",
    "section": "Imported Functions",
    "text": "Imported Functions\nPython is meant to be a highly modular language.\nIt is not designed to have a lot of special purpose functions built into it.\nThese keeps it light and highly customizable.\nMany functions (and other stuff) can be imported into a program to add to the functions that you can call in a script.\nThere are also many packages to bring in additional functions.\nPackages and Libraries"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#user-defined-functions",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#user-defined-functions",
    "title": "NB: Introduction to Functions",
    "section": "User-Defined Functions",
    "text": "User-Defined Functions\nPython makes it easy for you to write your own functions. These are called user-defined functions.\nLet’s write a function to compare the list against a threshold.\n\ndef vals_greater_than_or_equal_to_threshold(vals, thresh):\n    '''\n    This is the \"docstring\" of a function. It is optional but expected. It describes it's \n    purpose and the nature of the input and return values, as well as a sense of what it does.\n    More elaborate information should appear in external documentation packages with the function.\n    \n    PURPOSE: Given a list of values, compare each value against a threshold\n    \n    INPUTS\n    vals    list of ints or floats\n    thresh  int or float\n    \n    OUTPUT\n    bools  list of booleans\n    '''\n    \n    bools = [val >= thresh for val in vals]\n    \n    return bools\n\nLet’s break down the components\nThe function definition starts with def, followed by name, one or more arguments in parenthesis, and then a colon.\nNext comes a docstring to provide information to users about how and why to use the function.\nThe function body follows.\n:astly is a return statement\nThe function call allows for the function to be used.\nIt consists of function name and required arguments:\nvals_greater_than_or_equal_to_threshold(arg1, arg2) where arg1, arg2 are arbitrary names.\n\nAbout the docstring\nA docstring m occurs as first statement in module, function, class, or method definition\nInternally, it is saved in __doc__ attribute of the function object.\nIt needs to be indented.\nIt can be a single line or a multi-line string.\n\n\nLet’s test our function\nThe function body used a list comprehension for the compare:\n[val >= thresh for val in vals]\n\n## validate that it works for ints\n\nx = [3, 4]\nthr = 4\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n[False, True]\n\n\n\n## validate that it works for floats\n\nx = [3.0, 4.2]\nthr = 4.2\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n\n## vals_greater_than_or_equal_to_threshold(\"foo\", \"bar\")\n\nThis gives correct results and does exactly what we want.\n\n\nUsers can print the docstring\n\nprint(vals_greater_than_or_equal_to_threshold.__doc__)\n\nprint the help\n\nhelp(vals_greater_than_or_equal_to_threshold)\n\n\n?vals_greater_than_or_equal_to_threshold\n\nLet’s test our function\nThe function body used a list comprehension for the comparison:\n[val >= thresh for val in vals]\n\n## validate that it works for ints\n\nx = [3, 4]\nthr = 4\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\n\n## validate that it works for floats\n\nx = [3.0, 4.2]\nthr = 4.2\n\nvals_greater_than_or_equal_to_threshold(x, thr)\n\nThis gives correct results and does exactly what we want.\nPrint the docstring\n\nprint(vals_greater_than_or_equal_to_threshold.__doc__)\n\nPrint the help\n\nhelp(vals_greater_than_or_equal_to_threshold)\n\nUse the ? prefix …\n\n?vals_greater_than_or_equal_to_threshold"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#passing-parameters",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#passing-parameters",
    "title": "NB: Introduction to Functions",
    "section": "Passing Parameters",
    "text": "Passing Parameters\nFunctions need to be called with correct number of parameters.\nThis function requires two params, but the function call includes only one param.\n\ndef fcn_bad_args(x, y):\n    return x + y\n\n\nfcn_bad_args(10)\n\nTypeError: fcn_bad_args() missing 1 required positional argument: 'y'\n\n\n\nParameter Order\nWhen calling a function, parameter order matters.\n\ndef fcn_swapped_args(x, y):\n    out = 5 * x + y\n    return out\n\n\nx = 1\ny = 2\n\n\nfcn_swapped_args(x, y)\n\n7\n\n\n\nfcn_swapped_args(y, x)\n\n11\n\n\nGenerally it’s best to keep parameters in order.\nYou can swap the order by putting the parameter names in the function call.\n\nfcn_swapped_args(y=y, x=x)\n\n\n\nWeirdness Alert\nNote that the same name can be used for the parameter names and the variables passed to them.\nThe names themselves have nothng to do with each other!\nIn other words, just because a function names an argument foo,\nthe variables passed to it don’t have to name foo or anything like it.\nThey can even be named the same thing – it does not matter."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#unpacking-list-likes-with-args",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#unpacking-list-likes-with-args",
    "title": "NB: Introduction to Functions",
    "section": "Unpacking List-likes with *args",
    "text": "Unpacking List-likes with *args\nThe * prefix operator can be passed to avoid specifying the arguments individually.\n\ndef show_arg_expansion(*models):\n    \n    print(\"models          :\", models)\n    print(\"input arg type  :\",  type(models))\n    print(\"input arg length:\", len(models))\n    print(\"-----------------------------\")\n    \n    for mod in models:\n        print(mod)    \n\nWe can pass a tuple of values to the function …\n\nshow_arg_expansion(\"logreg\", \"naive_bayes\", \"gbm\")\n\nmodels          : ('logreg', 'naive_bayes', 'gbm')\ninput arg type  : <class 'tuple'>\ninput arg length: 3\n-----------------------------\nlogreg\nnaive_bayes\ngbm\n\n\nYou can also pass a list to the function.\nIf you want the elements unpacked, put * before the list.\n\nmodels = [\"logreg\", \"naive_bayes\", \"gbm\"]\nshow_arg_expansion(*models)\n\nmodels          : ('logreg', 'naive_bayes', 'gbm')\ninput arg type  : <class 'tuple'>\ninput arg length: 3\n-----------------------------\nlogreg\nnaive_bayes\ngbm\n\n\nThis approach allows your function to accept an arbitrary number of arguments.\n\nshow_arg_expansion('a b c d e f g'.split())\n\nThe reverse is true, too.\nYou can use the * prefix to pass list-like objects to a function that specifies its arguments.\n\ndef arg_expansion_example(x, y):\n    return x**y\n\n\nmy_args = [2, 8]\narg_expansion_example(*my_args)\n\nBut, the passed object must be the right length.\n\nmy_args2 = [2, 8, 5]\narg_expansion_example(*my_args2)\n\n\n## **my_dict"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#default-arguments",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#default-arguments",
    "title": "NB: Introduction to Functions",
    "section": "Default Arguments",
    "text": "Default Arguments\nUse default arguments to set the value of arguments when left unspecified.\n\ndef show_results(precision, printing=True):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision\n\n\npr = 0.912\nres = show_results(pr)\n\nprecision = 0.91\n\n\nThe function call didn’t specify printing, so it defaulted to True.\nNOTE: Default arguments must follow non-default arguments. This causes trouble:\n\ndef show_results(precision, printing=True, uhoh):\n    precision = round(precision, 2)\n    if printing:\n      print('precision =', precision)\n    return precision\n\nSyntaxError: non-default argument follows default argument (<ipython-input-19-29f5905a75a5>, line 1)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#returning-values",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#returning-values",
    "title": "NB: Introduction to Functions",
    "section": "Returning Values",
    "text": "Returning Values\nFunctions are not required to have return statement.\nIf there is no return statement, a function returns None.\nFunctions can return no value (None), one value, or many.\nMany values are returned as a tuple.\nAny Python object can be returned.\n\n## returns None, and prints.\n\ndef fcn_nothing_to_return(x, y):\n    out = 'nothing to see here!'\n    print(out)\n\n\nfcn_nothing_to_return(x, y)\n\nnothing to see here!\n\n\n\nr = fcn_nothing_to_return(1, 1)\nprint(r)\n\nnothing to see here!\nNone\n\n\n\n## returns three values\n\ndef negate_coords(x, y, z):\n    return -x, -y, -z \n\n\na, b, c = negate_coords(10, 20, 30)\nprint('a =', a)\nprint('b =', b)\nprint('c =', c)\n\na = -10\nb = -20\nc = -30\n\n\n\nfoo = negate_coords(10, 20, 30)\n\n\nfoo, len(foo)\n\n((-10, -20, -30), 3)\n\n\nIf you don’t need an output, use the dummy variable _\n\nd, e, _ = negate_coords(10,20,30)\nprint('d =', d)\nprint('e =', e)\n\nNote: It’s generally a good idea to include return statements, even if not returning a value.\nThis shows that you did not forget to consider the return value.\nYou can use return or return None.\nFunctions can contain multiple return statements.\nThese may be used under different logical conditions.\n\ndef absolute_value(num):\n    if num >= 0:\n        return num\n    return -num\n\n\nabsolute_value(-4)\n\n\nabsolute_value(4)\n\nFor non-negative values, the first return is reached.\nFor negative values, the second return is reached."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-03-Functions.html#function-design",
    "href": "modules/M04_PythonFunctions/M04-03-Functions.html#function-design",
    "title": "NB: Introduction to Functions",
    "section": "Function Design",
    "text": "Function Design\nA function is not just a bag of code!\nSome good practices for creating and using functions:\n\ndesign a function to do one thing\n\nMake them as simple as possible, which makes them:\n\nmore comprehensible\neasier to maintain\nreusable\n\nThis helps avoid situations where a team has 20 variations of similar functions.\nGive your function a good name.\n\nIt should reflect the action it performs.\nBe consistent in your naming conventions.\nA name like compute_variances_sort_save_print suggests the function is overworked!\n\nIf the function compute_variances also produces plots and updates variables, it will cause confusion.\nAlways give your function a docstring - Particularly important since indicating data types is not required.\n- As a side note, you can include this information by using type annotation.\nFinally, at some point you may be interested to learn some of the formatting languages that have been developed to write docstrings. See Lutz 2019 and this web page about Documenting Python Code for more info."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-04-LambdaFunctions.html#introduction",
    "href": "modules/M04_PythonFunctions/M04-04-LambdaFunctions.html#introduction",
    "title": "NB: Lambda Functions",
    "section": "Introduction",
    "text": "Introduction\nPython lambda functions are small, informal functions. They don’t get a name.\nThe are “anonymous.”\nFrom Lutz 2019:\n\nBesides the def statement, Python also provides an expression form that generates function objects. Because of its similarity to a tool in the Lisp language, it’s called lambda. Like def, this expression creates a function to be called later, but it returns the function instead of assigning it to a name. This is why lambdas are sometimes known as anonymous (i.e., unnamed) functions. In practice, they are often used as a way to inline a function definition, or to defer execution of a piece of code.\n\nThe general form of a lambda function is:\n\nlambda x: x\n\n<function __main__.<lambda>(x)>\n\n\nYou can call the function like this:\n\n(lambda x: x)(2)\n\n2\n\n\nincrement x\n\n(lambda x: x+1)(5)\n\n6\n\n\nsum two variables\n\nlambda x, y: x + y\n\n<function __main__.<lambda>(x, y)>"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-04-LambdaFunctions.html#assigned-to-a-variable",
    "href": "modules/M04_PythonFunctions/M04-04-LambdaFunctions.html#assigned-to-a-variable",
    "title": "NB: Lambda Functions",
    "section": "Assigned to a Variable",
    "text": "Assigned to a Variable\nEven though they don’t get a name, they can be assigned to variables.\nHere, a lambda function gets assigned to sum_two_vars.\n\nsum_two_vars = lambda x, y: x + y\n\n\nsum_two_vars(2,4)\n\n6\n\n\nCheck if a value is non-negative\n\nis_non_negative = lambda x: x >= 0\n\n\nis_non_negative(-9)\n\nFalse\n\n\n\nis_non_negative(0)\n\nTrue\n\n\nPackage first element and all data into tuple\n\npack_first_all = lambda x: (x[0], x)\n\n\ncasado = ('rice','beans','salad','plaintain','chicken') # a typical Costa Rican dish\n\npack_first_all(casado)\n\n('rice', ('rice', 'beans', 'salad', 'plaintain', 'chicken'))\n\n\nCheck for keyword “dirty”\n\nis_dirty = lambda txt: 'dirty' in txt\n\n\nkitchen_inspection = 'dirty dishes'\nis_dirty(kitchen_inspection)\n\nTrue\n\n\n\nkitchen_inspection = 'pretty clean!'\nis_dirty(kitchen_inspection)\n\nFalse\n\n\n**pass *args for unspecified number of arguments**\n\n(lambda *args: sum(args))(1,2,3)\n\n6"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-04-LambdaFunctions.html#using-lambda",
    "href": "modules/M04_PythonFunctions/M04-04-LambdaFunctions.html#using-lambda",
    "title": "NB: Lambda Functions",
    "section": "Using Lambda",
    "text": "Using Lambda\nLambda functions are often used in Pandas. We will discuss there use in more detail when we get to that topic."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-05-RecursiveFunctions.html#introduction",
    "href": "modules/M04_PythonFunctions/M04-05-RecursiveFunctions.html#introduction",
    "title": "NB: Recursion",
    "section": "Introduction",
    "text": "Introduction\nA recursive function is a function that calls itself.\nThis is weird, since it does not seem possible. How can a definition refer to itself?\nIn philosophy, this is expressed in the Barber’s Paradox:\n\nThe barber is the one who shaves all those, and those only, who do not shave themselves. Does the barber shave himself?\n\nFormally, it is a type of self-reference, like This sentence is false.\nA Cute Definition\nrecursion - the art of defining something (at least partly) in terms of itself, which is a naughty no-no in dictionaries but often works out okay in computer programs if you’re careful not to recurse forever (which is like an infinite loop with more spectacular failure modes).\nSource: PerlDoc\n\nA Formal Definition\nIn mathematics and computer science, a class of objects or methods exhibits recursive behavior when it can be defined by two properties:\nA simple base case (or cases): a terminating scenario that does not use recursion to produce an answer.\nA recursive step: a set of rules that reduces all successive cases toward the base case.\n\n\nAs Seen in Nature\nRecursion occurs naturally when a process applies a rule to itself successively.\nWe see this in fractals.\n\n\nInfinite Loops and Stack Overflows\nEvery recursive function must have a base condition that stops the recursion or else the function calls itself infinitely.\nThe Python interpreter limits the depths of recursion to help avoid infinite recursions, resulting in stack overflows.\nThe call stack is where information is stored relating to the active subroutines in a program.\nThe call stack has a limited amount of available memory. When excessive memory consumption occurs on the call stack, it results in a stack overflow error.\n\n\nA Note of Caution\nSo, Recursion is cool, but is expensive and complicated.\nRecursive functions can usually be implemented by traditional loops."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-05-RecursiveFunctions.html#example-computing-factorials",
    "href": "modules/M04_PythonFunctions/M04-05-RecursiveFunctions.html#example-computing-factorials",
    "title": "NB: Recursion",
    "section": "Example: Computing Factorials",
    "text": "Example: Computing Factorials\nSource\nThe factorial of a number \\(n\\) is the product of all the integers from \\(1\\) to \\(n\\).\nFor example, the factorial of \\(5\\) (denoted as \\(5!\\)) is \\(1\\times2\\times3\\times4\\times5 = 120\\).\nLet’s implement this in code using a recursive function.\n\nRecursive Function\n\nn = 5\n\n\n##| tags: []\ndef factorial(x):\n    \"Finds the factorial of an integer using recursion\"\n    if x == 1: # Base condition\n        return 1\n    else:\n        return x * factorial(x-1)\n\n\n##| tags: []\n%time factorial(n)\n\nCPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 7.87 µs\n\n\n120\n\n\n\n\nAs a while loop\n\ndef factorial_while(x):\n    \"Finds the factorial of an integer using a while loop\"\n    f = x\n    while x > 1:\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_while(n)\n\nCPU times: user 3 µs, sys: 1 µs, total: 4 µs\nWall time: 6.44 µs\n\n\n120\n\n\n\n\nAs a for loop\n\ndef factorial_for(x):\n    \"Finds the factorial of an integer using a for loop\"\n    f = x\n    for i in range(1, x):\n        x -= 1\n        f *= x\n    return f\n\n\n%time factorial_for(n)\n\nCPU times: user 4 µs, sys: 0 ns, total: 4 µs\nWall time: 7.15 µs\n\n\n120\n\n\n\n\nCompare functions as \\(n\\) increases\n\nIncrease n to 50\n\nn = 50\n%time factorial(n)\n\nCPU times: user 30 µs, sys: 0 ns, total: 30 µs\nWall time: 33.4 µs\n\n\n30414093201713378043612608166064768844377641568960512000000000000\n\n\n\n%time factorial_while(n)\n%time factorial_for(n)\n\nCPU times: user 7 µs, sys: 1 µs, total: 8 µs\nWall time: 10.7 µs\nCPU times: user 7 µs, sys: 0 ns, total: 7 µs\nWall time: 9.06 µs\n\n\n30414093201713378043612608166064768844377641568960512000000000000\n\n\n\n\nIncrease n to 500\n\nn = 500\n\n\n%time factorial(n)\n\nCPU times: user 494 µs, sys: 0 ns, total: 494 µs\nWall time: 499 µs\n\n\nn\n\n\n%time factorial_while(n)\n\nCPU times: user 85 µs, sys: 5 µs, total: 90 µs\nWall time: 93 µs\n\n\nn\n\n\n%time factorial_for(n)\n\nCPU times: user 88 µs, sys: 0 ns, total: 88 µs\nWall time: 90.8 µs\n\n\nn\n\n\n\nIncrease n to 5000\n\nn = 5000\n%time factorial(n)\n\nRecursionError: maximum recursion depth exceeded in comparison\n\n\n\nfactorial_while(n)\n\nn\n\n\n%time factorial_while(n)\n\nCPU times: user 4.93 ms, sys: 0 ns, total: 4.93 ms\nWall time: 4.94 ms\n\n\n422857792660554352220106420023358440539078667462664674884978240218135805270810820069089904787170638753708474665730068544587848606668381273633721089377278763127939036305846216064390447898698223987192970889621161265296832177550039924219683703146907264472878789790404754884162215226671928410969236910449565971736352948400223840381120644820230857671104502306174894755428309761781724040805324809927809328784055486199364548291211876258248802189173977900050213212598043639244626460770511358846595108675470585833924655225589035474435988347383178988034633008458631510209091509935653820010933047965742556741930917055172805200236075085991197635228755907902043369743123506916831211924495971556267407521462198986233088625998302859864857578749445963115286970886710046268423648178989905454690861391613218344174148807186234448114831209490361196546872767755617886828720269104814092456410341835975604276458161513178575901661071782544156980883359372729995603371371200471049437656291142488605335299499642300699972204918120100819059439140675053265004775533850899097945101551091486907004407119572336026243368132330218709287699196806656569752790422258267841561083376425781032629202687211070274681394351128601502326190649959171897364176378436491219709109840944514895358959103804176941956657834822071749105512752639148381172052604826965162642710094919393332661030104360530459117014557209584714353721948246686793467375904872268133410207860903657108806376616249749507413107077401682180585945526445171409277469230062697511346044174567946735828782261629584248675157379172942724178783105429858245117575511884506574424827574660800238588378492396247368761507015767725898321128632295537044902516387925127590841791744640466913531047347984464996154595542013996317357476301740036796192919942190762895445656261767041799538161133387312823511534152581309087915883638351664797225912944270653557142511737323807232632958121797916679692329687096923901003255574789055099807487061047230646195984955239657612208673866514171699307557691897902675157342075864796345338446835085965490727326321910504064289713096224505162064669468098869917122127404504020684923266241760132910227866687270305284709452526825496617772499645206699836925910690894082637401043498371591126455822280606361394115344316771769934353664284928294436414769615881993661388255577487709937004594753907845149034434521174560594039916268444697661821387470705325559577933196460996662145377564935474169708562389214773222865507182490430016186142192760452307670621142961767274704123616107220009743758647492753665149532164780849075146330071016691313420662882562618283865836983632108760710427516073348347788414796732427080410860761841281888307115098982135338406610652147087046874760995427473673509451553599769040367353385551052571682650317682405743993414862392331981432579182193321898940450865013610998098383993110996355981328001049731588596312131853801205046787642910669365600437305633431984879048998524701293300789344532868156679762880495532846386020133480265279836946393384995675049993707814746561543438930431384237878981847802886009971088695632988347711863122382785963653115132377931373647397429369411499028751972227999545182615488298951151926682112451355318472209990435355949887299922035062039816011086376236539782172380237846650673624510635034423187315338308212043804710999419227821039747552717416043890169723961305549371844836119803565896062025009093664399360172007383613354405094329072476518909502507724675841989412224659392163116352038147362479528539732089309533421910635702805576629720156556510767780805933453631121829561792887673002802450932122778852968418208261778476955644980385691275787372678040959158711733971103165232678060798127609246173504120182666874262805385275843979167609007743380748420751185119102921960339376280986753665085212869255321536787932521882574101866137054328973735862725370178558806639851350386944039604928258820180419178073649693885802597758398892014389747165465973510852605706234402069637065660129535734043582961473427275805630839510667375349259659518575646939723218275780003250593895303820539697558870511543073920827422440516299708739599768461206246629098112368012579891284802505094028916959765079395437191311379314427405135599630375642214527294341797246187597964074239147838993541565834716156858499036773056611353833367087548900413091981676330749041510337597307246885839246941715548295730750618505881581959528992660225626903439573313450666972952115230668696227920947779974336574472673471408928071411283888082693377378077293104110767513639476200610858040596019639058015761002337463869352228385801434957178125581445862930042479404065736859862007914604590255413929950088044710384758990326548097338166940500085452723713571394902463820308668541802838317527668064278489561005755859991718966786449154063570014497194249878920859731254275567514575206399118150736397483102490793841725653421894276769116598153430084637087769510295415136551734675054015239706042571746001089968440498845985477977905031632568489156557231006499726498721480800181770357701502983008879487243887718884416833034708723239505377642232944095773219137582371673924704216723002256883135779230394688900662466182532658490724406767024939579697217467485562998183149665611743997680482094166257463879660305171274925119226367615337524381656217330771650129520988754856467131862602387619964334867961514408328902061082833180891221325853682856469916007952105166960451695430614212305743006877217407155473217957577017595967640563812729153867513698712395570542350999228605975469962186195531354132139126436676900465429996811680550737866770665988027062972502001882845886145344368771455361304414465613369092862748276981946836480550952968681758714859972973082332924094777085275279923304892719633314751563311192746150389219290616780607901383451137066300684376267199885515143681266137319912103235469786756421210624899005553564022924345831264231038363416781719908354140411717740185950606674198348143345444247191436828225654380047860390575922417071802670646875454211626958746795398540784464654140381751149965273621123540880166990280149033225139460832668170930713868826549977374286127789417784752681328371818759103642140881783220739808059714203285309721443041845459183002833408705783138284973283761286182927136745161897366207237396132790944984014154408304074405393067540767126182547597130843470311389815695365971788564022750674237400323621850094765267521941901241387478279883426470873616812485384444012772521050072279315853096279121131160167772077952572613800240684421885453537121341902236379684012385255288607189967725694227433323948595075570839061877450159652184414998155476107548008054192318436948191732631430603548399790783307267636729090980772827355854348032260067472537097785464567761181807367424367391769863758072145859791485033700592994963793369100283444558089838054017635403737133019311293080958287612107380374800660269767842888358265737486556785868822015143046249655995760379768685318192365806469199584071845493606922169776137542662239658644989770921478134709127917460871630220821981434654245065731262683089579031012893360788644107230184805400373136014216229159146992019884148290014414312800903102107833305090238435726779416177246873411503598700003151092815700331081727415624680432977205070450456683898626301702989301145364477416856732512330376477881749036052572605520684370616116539755132541369303867783267208227323664249206432363089268768826650939691861683271739757479552993242406186992420363781929485368098035256331092448215269276219116259145886393677034653480367887126133367116968226450914997055448521259751870084720025674658752403932061045903070039438252019383102480929019684602472171298321628237994627125366359971898374425099120673688383738299653892030662843074547559074235345274029211606091346327684749522046010409575607348155101677203187580089224494752922031093841661588823584993931745149914395557357641584185479831702428523965451087525425464777294595230360946416541997797947136806344915998772409176443137371178542210740572121166868692153240490080384205921192622875440898261478908123698956367080804687628524499897440855677969456909042340530355943524640751677873953113928698614347227572144946891896093294375476741234907792754338349412323060078767610089949156126934038921148370217193387617823370358925817112869563450001367619897145400986643461922197676975930010555225198913002123021780831934330880446592954552165911855939202579781122952065357362914478404946474565003115498072056580360667380889572746464375428055819322299305089287806874537401327100274428317925355003451536693172112088227603942809788645727306979971285649576934354004030728440581746648376658498039958964243370183454151720285337810904113124462432903353964296651109482836884580127588701293156099225044518125460113274986014470437757313881001319276124676116614833528935557503106018449788994378274613854651708241613167681463911870000812845144341406739985430072772303758111613511094355614896323929750846383152930263582535361784837558519666949972251935515953807207838615142130284450051795239760968433198292598921623223582396390262548856855875458198371559008447860086745945709118128793228222051767509371866110013193625845223493949829511199280837860523506412769337548130609594264463425077601147334209139128541628183172262143783062962408149391997187528106367348876678481602342743230027158192404187686545826519361990687336892886715133840245486110982482004482721799496658712257174429044916781194824165631560303473833317665121218052780795958220298330611945164019413315550379662980215357680731124530585915969709973988055743550083279071844959752353594644354789680372126344509423070253995102864458237454677761013556916212309752286152053213998745673034127676503369636682306665552051562491132528926155863868503100849180920507680658265915276163719928694258350604859732273949286080260640627521341007801815105623787926212039424781833439433877206395801115809084190794320195178235740190546595990289617711776195270354051193727229722248442080440098750369411277686593022133010625031862085145076421052980508837197986052557750303949606158442838846866137510968441567309838079394349570013029265177957120625555851951313574029897589283475525334409858911400694449308432874005015554332587793895080241128538758725945136400838324944471346436826148195406004114845870234072926697740631325878634790667698266181501256117692275715291249164821702372884416357600996851100939411444677628186007072278522314941048564396255796808221289935799262208553889221164765220850367706476491496133789353761537391569177822237744837614120253342622508007300513473422771427333106345971803240244226950458090539326689103619381998838844036231795282435495362489670734155948067688515321073064476077859628627852283657244564306449096277517172656954238392941958409527253281659572534531428389629894005886539486824117113929627356938973482935854650278689437014798383826002058208853517073216288725214522205265969614962147884840129004507737252424605074339660818182960296019196314124998538422017695110361380561701016357743542531148669369994130940908368220071936435111978592782493491477052187226546109199597269439152400467901173602521030051886080337084840114810246351288263986170081804888380750203521448348740849154718714478857809574515499505005070789428842888410027877777455981132319940624176532148686316581736774410084063436959989519288310869124517866342559353458242589411390516469440377562665821577845936829909679754548350510473633770839151033854639602753486401635204633884342346714935641429160856846724874244782055113759168236472297793612971080302530934478115527737540458968990354808058309381267323593563098546564376209385371052808344607189076003388781618019853273759498566916704703448438363503416368325266403224174519476678140428319327482851882140344319384445475456765253419659194332132585432270070759038565239668227171300009189122050845185261514627937717597528852978637931711212529529443323757910072909001703558763798612480281463093944391916950129336315045285163539312868586427437296109446101235604877439863299611899755965996608749049271167685268675335991297583209089553296409523640116060078495005377892783750147344122123777907727134146647404489837589487675423294546899354220341669961366698976529978580795899055864050388507083137333076839766882463680992355219727241831735127646189112380485883115569477888101759708977682149644340317924443085170303692214137621194388641989508360339306459037361842937028710758321966607546113761076362543928614316242890754021082233620012309384737312220374269033838579928678572939434168287053763374091938184632261131740934278117918891642447513543478446040549455379834556163353815868441692054518698919434175386663900335756765603264363767906721626620330878425545157208117246381251512669846685887209013144861632560461019513371814585249988176629925142145014710206193190373671380347663431029705222414785030188275106347446241258707937339085095757724316735066885094208761536164440443755860160625837091300574162065273670941888667964570550744724714137001968165215954380698515999483361357521322106131884771926641942395351412233546746461491743013475866037338176532604557402925472279360288926189385899695656876783017186873988763887625972743976062813263446647679413679726184933395074665820441677989806604203937116666336696282569349097348391155869004856032512219241534268522369316036765491047702733521540143168338872968405443296967684036073182435336224865433823598123544167514608340781166661858781733980624199254577853462678039039937557802759942957205281043775666979396838109341118959475766220191217535093638985465283078692370662512323684390235587636228324657161183714078807661162179517887972801841572019639084400269037450381192797170314489871815031319992111563908303017288012610642062005359240278277393918026391717720136125984776933980647063763022608885359937595079088789081791802195768033381968605120487107610874898411568740159953020639098138993261095538868264084012160831040525974539251576403732889086736948366404734622708560040891610782221943405179794550155347682966855320097501905581419914591124181501062255627411231571377358697194374130822027383843815940638571387913337592362330440453487233047240668784133333047898995255221468847973813568083995644533005222551320155267768895412770329278670827490041172076663112783638152343547681663121189086864991380236281775275946061211813342054791801619220346912760381900528012343973598270461499814511324618195658528232044658270082064934680251556511272822083811563192256509945201222666603226059396247019707668580396286975551115189973049085051758765306785758000660424066894170620303846785860257370634352599586885088679654004465187790208942935153217316750113738031466034642429489076322228133763299919641336502028627289268087560036613770607463575515079087982099722660130472907825746908175451952405573791313113170617323191598673971588373108168916968657704150695512947652386134815766967580364762005289060222744531744305498402863048850869557761528650326080941160688570698894762046478500884303973107412774191961697450517110329082815201273888663422631492147090220016940636504812047036016738602290671629816411198202268607961324739550057567564568204754619040423011062371367395995678940884705976859514505017241517746017351430990972615509378334720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n\n\n\n%time factorial_for(n)\n\nCPU times: user 4.82 ms, sys: 0 ns, total: 4.82 ms\nWall time: 4.84 ms\n\n\n
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-05-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "href": "modules/M04_PythonFunctions/M04-05-RecursiveFunctions.html#example-the-fibonacci-sequence",
    "title": "NB: Recursion",
    "section": "Example: The Fibonacci sequence",
    "text": "Example: The Fibonacci sequence\nFib(0) = 0 (base case 1)\nFib(1) = 1 (base case 2)\nFor all integers n > 1, Fib(n) = Fib(n − 1) + Fib(n − 2)\n\ndef Fibonacci(n):\n    \"Compute a Fibonacci Sequence using recursion\"\n\n    # If n is negative\n    if n < 0:\n        print(\"Incorrect input. Value must be 0 or greater.\")\n\n    # If n is 0\n    elif n == 0:\n        return 0\n\n    # If n is 1 or 2\n    elif n == 1 or n == 2:\n        return 1\n\n    else:\n        return Fibonacci(n - 1) + Fibonacci(n - 2)\n\n\nn = 9\n\n\nFibonacci(9)\n\n34\n\n\n\nfor n in range(100):\n    if n > 0: print(\", \", end=\"\")\n    print(Fibonacci(n), end=\"\")\n\n\nAs a for loop\n\ndef fibber(r:int = 10):\n    \"\"\"\n    Computes a Fibonacci Sequence using a for loop. \n    Parameter r must be in integer > 3. Defaults to 10.\n    Returns a string as a comma-limited series.\n    \"\"\"\n    seq = [1,1,2] \n    kernel = lambda x, i: x[i-1] + x[i-2]\n    for n in range(3, r):\n        seq.append(seq[n-1] + seq[n-2])\n    return ', '.join([str(x) for x in seq])\n\n\nfibber(20)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-05-RecursiveFunctions.html#aside-a-general-sequence-function",
    "href": "modules/M04_PythonFunctions/M04-05-RecursiveFunctions.html#aside-a-general-sequence-function",
    "title": "NB: Recursion",
    "section": "Aside: A General Sequence Function",
    "text": "Aside: A General Sequence Function\nRecursive functions are often used to produce mathematical sequences, but since they have limits on depth, they are of limited use for this purpose.\nHere is a function that can combine many sequences using two sequence parameters: * The initial state of the sequence, represented as the list seq. * For example, in the Fibonacci sequence, seq is [1, 1, 2] * The function to apply to the sequence at each iteration, represneted as a lambda function with the arguments x and i for the the sequence list seq and the iteration number respectively. * For example, in the Fibonacci sequence the kernel function is lambda x, i: x[i-1] + x[i-2]\n\n##| tags: []\ndef sequencer(n:int = 10, seq=[1, 1, 2], kernel=lambda x, i: x[i-1] + x[i-2]):\n    \"\"\"\n    Computes a Sequence using a for loop. \n    \n    Parameter n in integer which must be > 3. Defaults to 10.\n    Parameter seq is as list in the initial state of the sequence. Must have at least one value. Defaults to Fibonacci [1,1,2]\n    Parameter kernel is the kernel function applied to the series at each iteration. x stands for the seq list, i to the iteration number. Defaults to lambda x, i: x[i-1] + x[i-2]\n    \n    Returns a string as a comma-limited series.\n    \"\"\"\n    \n    for i in range(len(seq), n): seq.append(kernel(seq, i))\n    return ', '.join([str(x) for x in seq])\n\n\nn = 8\n\n\n%time sequencer(n, [0], lambda x, i: i)\n\nThe series of positive integers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 1)\n\nThe series of even numbers\n\nsequencer(n, [2], lambda x, i: x[i-1] + 2)\n\nThe series of odd numbers\n\nsequencer(n, [1], lambda x, i: x[i-1] + 2)\n\nThe series of Fibonacci numbers\n\nsequencer(n, [1,1,2], lambda x, i: x[i-1] + x[i-2])\n\nThe series of Squares\n\nsequencer(n, [2], lambda x, i: x[i-1]**2)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#overview",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#overview",
    "title": "NB: Variable Scope",
    "section": "Overview",
    "text": "Overview\nA variable’s scope is the part of a program where it is visible.\n\nScope refers to the coding region, such as a function block, from which a particular Python object is accessible.\nVisible means available or usable to the code block in question.\nIf a variable is in scope to a function, it is visible the function.\nIf it is out of scope to a function, it is not visible the function.\n\nWhen a variable is defined inside of a function, it is not visible outside of the function. * We say such variables are local to the function. * They are also removed from memory when the function completes.\nWhen a variable is defined outside of any function in a script, it is visible to any function inside of the script * We say such variables are global to the functions in the file or context in which the variables are defined. * A function can replace a global variable with local variable by defining that variable. In this case, a variable can have global and local versions in the same program.\nSometimes variable scope is called lexical scope.\nIt is helpful to have a good understanding of scope to avoid surprises and confusion.\nThe concept is easier than it may look in the abstract. Let’s look at some examples where we vary the use of local and global definitions of x."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#lutz-on-scoping",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#lutz-on-scoping",
    "title": "NB: Variable Scope",
    "section": "Lutz on Scoping",
    "text": "Lutz on Scoping\nHere’s an excerpt from Lutz, Chapter 17. Please read the whole thing.\nThe enclosing module is a global scope. Each module is a global scope—that is, a namespace in which variables created (assigned) at the top level of the module file live. Global variables become attributes of a module object to the outside world after imports but can also be used as simple variables within the module file itself.\nThe global scope spans a single file only. Don’t be fooled by the word “global” here—names at the top level of a file are global to code within that single file only. There is really no notion of a single, all-encompassing global file-based scope in Python. Instead, names are partitioned into modules, and you must always import a module explicitly if you want to be able to use the names its file defines. When you hear “global” in Python, think “module.”\nAssigned names are local unless declared global or nonlocal. By default, all the names assigned inside a function definition are put in the local scope (the namespace associated with the function call). If you need to assign a name that lives at the top level of the module enclosing the function, you can do so by declaring it in a global statement inside the function. If you need to assign a name that lives in an enclosing def, as of Python 3.X you can do so by declaring it in a nonlocal statement.\nAll other names are enclosing function locals, globals, or built-ins. Names not assigned a value in the function definition are assumed to be enclosing scope locals, defined in a physically surrounding def statement; globals that live in the enclosing module’s namespace; or built-ins in the predefined built-ins module Python provides.\nEach call to a function creates a new local scope. Every time you call a function, you create a new local scope—that is, a namespace in which the names created inside that function will usually live. You can think of each def statement (and lambda expression) as defining a new local scope, but the local scope actually corresponds to a function call. Because Python allows functions to call themselves to loop—an advanced technique known as recursion and noted briefly in Chapter 9 when we explored comparisons—each active call receives its own copy of the function’s local variables. Recursion is useful in functions we write as well, to process structures whose shapes can’t be predicted ahead of time; we’ll explore it more fully in Chapter 19.\nAnd here is a nice visualization of scopes:\n\n\n\nCar with tinted glass\n\n\nPlease read Lutz, Chapter 17 for a good overview of scoping."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#the-tinted-glass-metaphor",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#the-tinted-glass-metaphor",
    "title": "NB: Variable Scope",
    "section": "The Tinted Glass Metaphor",
    "text": "The Tinted Glass Metaphor\n\nSo, code regions within a program are like vehicles with tinted glass: * Passengers can see outside, but outsiders can’t see inside. * Passengers in a vehicle can let outsiders look in by lowering the window.\nOr something. Lile models, all metaphors are wrong, but some are useful. :-)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#example-1",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#example-1",
    "title": "NB: Variable Scope",
    "section": "Example 1",
    "text": "Example 1\nx defined outside a function but used inside of it\nIn the code below: * x is global and seen from inside the function.\n* a is local to the function. trying to print outside function throws error.\nNote that arguments are essentially locally defined variables.\n\nx = 10\n\ndef scope_func1(a):\n    out = x + a\n    return out\n\nThe following works because x is global and functions can access globals so long as they don’t reassign the variable name.\n\ny = scope_func1(6)\nprint(y)\n\nThe following fails because a local and not visible outside the function.\n\nprint(a)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#example-2",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#example-2",
    "title": "NB: Variable Scope",
    "section": "Example 2",
    "text": "Example 2\nx defined both outside and inside function, and used inside the function\nThis function reassigns x, so it becomes local.\nNote that a variable becomes local once it is used in an assignment statement within a function, or if it the name of an argument.\n\nx = 10 # Global\n\ndef scope_func2(a):\n\n    x = 20 # Local\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\ny = scope_func2(6)\nprint(y)\nprint('x from outside:', x)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#example-2a",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#example-2a",
    "title": "NB: Variable Scope",
    "section": "Example 2a",
    "text": "Example 2a\nHere we define x as an argument.\nThis has the same effect as defining it in the body of the function.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20): # Argment variables are local\n\n    print('x from inside:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6)\nprint(y)\nprint('x from outside before function:', x)\n\nAs an argument, though, it can be assigned the value of the global.\nNevertheless, only the value is being passed between the global and local versions of x.\n\nx = 10 # Global\n\ndef scope_func2a(a, x=20):\n\n    print('x from inside before incremenet:', x)\n    x += 10\n    print('x from inside after incremenet:', x)\n    \n    out = x + a\n    \n    return out\n\n\nprint('x from outside before function:', x)\ny = scope_func2a(6, x)\nprint(y)\nprint('x from outside after function:', x)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#example-3",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#example-3",
    "title": "NB: Variable Scope",
    "section": "Example 3",
    "text": "Example 3\nx defined both outside and inside function, and used inside the function in both global and local modes\nThis one is interesting. It fails, but it’s not clear why at first.\n\nx = 10\n\ndef scope_func3(a):\n    print('x from fcn, before local definition:', x) # Global use of x\n    x = 20 # Local use of x\n    print('x from fcn, after local definition:', x)\n    out = x + a\n    return out\n\n\nprint('x from outside before local definition:', x)\nscope_func3(6)\nprint('x from outside after local definition:', x)\n\nThe error can be fixed by referencing x as global inside function.\n\nx = 10\n\ndef scope_func4(a):\n    global x\n    \n    print('x from inside, before local definition:', x)\n    x = 20\n    print('x from inside, after local definition:', x)\n    \n    out = x + a\n    return out\n\n\nprint('x from outside, before local definition:', x)\ny = scope_func4(6)\nprint(y)\nprint('x from outside, after local definition:', x)\n\nNote that the two instances of the variable z coexist in the same script because of the rules of scoping."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#local-global-conflicts",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#local-global-conflicts",
    "title": "NB: Variable Scope",
    "section": "Local / global conflicts",
    "text": "Local / global conflicts\nWhat will calling guess() do?\nHint: “If you assign a name in any way within a def, it will become a local to that function by default.” (Lutz)\n\nx = 10\n\ndef guess():\n    x += 10 \n    print(x)\n\n\nguess()\n\nConsider the following expression, which is the same as the unary operation inside of the function guess().\n\nx = x + 10\n\nThe x on the left is local, since it is being defined inside the function.\nHowever, the x on the right is assumed to already be defined, and so is global.\nIn effect, Python is presented with a contradiction and so throws an error.\nWe will see that R does not do this; it just goes with the global."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#nonlocal",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#nonlocal",
    "title": "NB: Variable Scope",
    "section": "Nonlocal",
    "text": "Nonlocal\nIf a variable is assigned in an enclosing def, it is nonlocal to nested functions.\nThe nonlocal keyword is similar to global, except that it refers to the scope of the enclosing function, not the script that contains the funtions.\n\nx = 10 # Global\ndef func1(): # Enclosing function\n    x = 20 # Local to function; \"Nonlocal\" to nested function\n    def func1a():\n        x = 30 # Local to nested function\n        print(x)\n    func1a()\n    print(x)\n\n\nprint(x)\nfunc1()\nprint(x)\n\n\nx = 10\ndef func2():\n    x = 20\n    def func2a():\n        nonlocal x\n        x = 30\n        print(x)\n    func2a()\n    print(x)\n\n\nprint(x) # 1\nfunc2()\nprint(x) # 4\n\n\nx = 10\ndef func3():\n    x = 20\n    def func3a():\n        global x\n        x = 30\n        print(x)\n    func3a()\n    print(x)\n\n\nprint(x)\nfunc3()\nprint(x)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#namespaces",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#namespaces",
    "title": "NB: Variable Scope",
    "section": "Namespaces",
    "text": "Namespaces\nDefinitions of scope make reference to namespaces. Scope and namespaces are closely intertwined concepts. Sometimes it is assumed that the reader knows what this means.\nIf you’ve never heard of namespaces, or are unsure of what they are, here’s a brief explanation.\nA namespace is a system that allows for a unique name to associated with each and every object in a Python program. * Remember that an object can be anything in Python, not just variable, e.g. a function or a class. * Python maintains namespaces internally as dictionaries.\nA good analogy to a namespace system is the file system on a computer. You can have files of the same name so long as they are in different folders. The complete name of the file is actually the filename and the names of its parent folders, i.e. the path to the file in the file system.\nAnother anology is in human names – personal names and family names, i.e. first and last names in European countries. These in turn might be contained by larger social groupings.\nFinally, another analogy is home addresses – house numbers and street names can be reused based on their “path” in the tree of geographic entities that include cities, states, nations, etc.\nSimilarly, Python understands what exact method or variable one is trying to point to in the code, depending upon the namespace.\nNote that in each of these cases, the data structure is a directed acyclic graph (DAG), which is universal structure for organizing unique names."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-06-Scope.html#some-visualizations",
    "href": "modules/M04_PythonFunctions/M04-06-Scope.html#some-visualizations",
    "title": "NB: Variable Scope",
    "section": "Some Visualizations",
    "text": "Some Visualizations\n\nThe same object name can be present in multiple namespaces as isolation between the same name is maintained by their namespace.\n\nSource: “Namespaces and Scope in Python” (GFG)."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#basic-insight",
    "href": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#basic-insight",
    "title": "NB: Functions Calling Functions",
    "section": "Basic Insight",
    "text": "Basic Insight\nFunctions contain any code, so they can contain functions. * Functions can call other functions * Functions can define new functions\nWe create functions that call functions in order to break a complex process into components. * Some functions focus on simple component processes * Other functions combine these into higher order processes * Some functions may be focused on computation, while others may be focused on interacting with users or data sources * We can think of this a division of labor, or “separation of concerns,” among functions\nWhen you create groups of functions, they often form natural groups that associated with a common process or task. * These function groups often share variables in addition to calling each ohter\nLet’s look at some examples to illustrate these points."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "href": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#example-1-converting-temperatures",
    "title": "NB: Functions Calling Functions",
    "section": "Example 1: Converting Temperatures",
    "text": "Example 1: Converting Temperatures\nHere are three functions that work together to make a temperature converter.\nNotice how the last function integrates the first two.\n\ndef f_to_c(temp):  \n    \"\"\"\n    Converts F to C and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round((temp - 32) * (5/9))\n    \ndef c_to_f(temp):  \n    \"\"\"\n    Converts C to F and returns a rounded result.\n    Expects an integer and returns an integer.\n    \"\"\"\n    return round(temp * (9/5) + 32)\n    \ndef convert(temp, scale): \n    \"\"\"\n    Combines conversion functions into a two-way converter.\n    Expects a souce temp (int) and a target scale ('f' or 'c').\n    \"\"\"\n    if scale.lower() == \"c\":\n        return f_to_c(temp)  # function call to f_to_c\n    else:\n        return c_to_f(temp)  # function call to c_to_f\n\nNow, here is function that combines the above functions into a user-facing interface to the other functions.\n\n##| tags: []\ndef convert_app():\n    \"\"\"\n    Provides a user-interface to the the conversion functions.\n    \"\"\"\n    \n    # Get user input\n    temp = int(input(\"Enter a temperature: \"))                \n    scale = input(\"Enter the scale to convert to: (c or f) \")[0].lower()\n    \n    # Infer source scale, to be used in the output message\n    if scale == 'c':\n        current_scale = 'f'\n    else:\n        current_scale = 'c'\n    \n    # Do the conversion\n    converted = convert(temp, scale)\n    \n    # Print results for user\n    print(f\"{temp}{current_scale.upper()} is equal to {converted}{scale.upper()}.\")\n\n\nconvert_app()\n\nEnter a temperature:  45\nEnter the scale to convert to: (c or f)  f\n\n\n45C is equal to 113F.\n\n\n\nA More Pythonic Solution\nWe replace if/then statements with dictionary logic.\n\n## Put your logic in the data structure\nconverters = {\n    'c': lambda t: (t - 32) * (5/9),\n    'f': lambda t: t * (9/5) + 32\n}\n\n\ndef convert_app2():\n    \n    # Input from user\n    source_temp  = int(input(\"Enter a temperature: \"))                \n    target_scale = input(\"Enter the scale to convert to: (c or f) \")\n    \n    # Internal computations\n    target_temp  = converters[target_scale](source_temp)\n    # source_scale = list(set(converters.keys()) - set(target_scale))[0]\n    source_scale = (set(converters.keys()) - set(target_scale)).pop()\n    \n    # Output to user\n    print(source_temp, source_scale, \"converted becomes:\" , round(target_temp), target_scale)\n\n\nconvert_app2()"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "href": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#example-2-counting-vowels",
    "title": "NB: Functions Calling Functions",
    "section": "Example 2: Counting Vowels",
    "text": "Example 2: Counting Vowels\n\n## Predicate functions - often used as helper functions that return True or False\n\ndef is_vowel(l):\n    if l == \"a\" or l == \"e\" or l == \"i\" or l == \"o\" or l == \"u\":\n        return True  # if the letter is a vowel, return True\n    else:\n        return False # else, return False\n        \ndef num_vowels(my_string):\n    my_string = my_string.lower()\n    count = 0\n    for i in range(len(my_string)): # for each character\n        if is_vowel(my_string[i]):  # call function above\n            count += 1              # increment count if true\n    return count\n    \ndef vcounter():\n    my_str = input(\"Enter a string: \")\n    vcount = num_vowels(my_str)\n    print(f\"There are {vcount} vowels in the string.\")\n\n\nvcounter()\n\n\nA More Pythonic Solution\nWe can use a lambda function with a comprehension to replace the fisrt two functions above.\n\nvowel_count = lambda x: len([char for char in x.lower() if char in \"aeiou\"])\n\n\ntest_str = \"Whatever it is, it is what it is.\"\n\n\nvowel_count(test_str)"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "href": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#example-3-calculating-tax",
    "title": "NB: Functions Calling Functions",
    "section": "Example 3: Calculating Tax",
    "text": "Example 3: Calculating Tax\nWe write two related functions: * One to compute the tax based on a gross pay and a tax rate. * One to compute the net pay using the previous function.\nIn addition, we want to write some functions that use these functions to interact with a user. * One to get the input value of the gross pay and print the tax. * One to print the net pay based on the previous function.\nNote the division of labor, or “separation of concerns”, in these functions: * Some do calculative work * Some do interactive work\nTo compute tax, we have these data:\ngross_pay    tax_rate\n---------------------\n0   - 240    0%\n241 - 480    15%\n481 - more   28% \n\n\n\n\n\n\nThis time, we want to create a group of functions that expect some global variables to exist and use these instead of return statements.\n\n\nIn the code below, we globalize any variables that are assigned in our functions.\n\n\nThis allows them to be shared by all the other functions.\n\n\nNote that this is effective when our global environment – the containing script – contains only these functions.\n\n\nLater in this course, we will look at mechanisms to segment our code in this way.\n\n\n\n\ndef compute_tax():\n    \"\"\"\n    Computes tax rate and applies to gross pay to get tax.\n    Expects gross_apy to be defined globally.\n    Adds tax_rate and tax to globals for use by other functins.\n    \"\"\"\n\n    global tax_rate, tax\n\n    # Get rate by lower bound\n    if gross_pay > 480:\n        tax_rate = .28\n    elif gross_pay > 240:\n        tax_rate = .15\n    else:\n        tax_rate = 0\n        \n    tax = gross_pay * tax_rate\n            \ndef compute_net_pay():\n    \"\"\"\n    Computes net pay based on globals produced by compute_tax().\n    Expects gross_pay and tax to be defined globally.\n    Adds net_pay to to globals.\n    \"\"\"\n    \n    global net_pay\n    \n    net_pay = gross_pay - tax\n\ndef get_tax():   \n    \"\"\"\n    Computes and prints tax based on user input.\n    Essentially a wrapper around compute_tax().\n    Adds gross_pay to globals.\n    \"\"\"\n    \n    global gross_pay\n    \n    gross_pay = int(input(\"Enter your gross pay in dollars: \"))                            \n    \n    compute_tax()\n    \n    print(f\"Based on a tax rate of {round(tax_rate * 100)}%, the tax you owe on ${gross_pay} is ${round(tax)}.\")\n    \ndef get_net_pay():\n    \"\"\"\n    Computes and prints net pay based on globals.\n    \"\"\"\n    \n    compute_net_pay()\n    \n    print(f\"Your take home (net) pay is ${round(net_pay)}.\")\n    \ndef do_all():\n    \"Runs both user-facing functions.\"\n    get_tax()\n    get_net_pay()\n\n\nget_tax()\n\n\nget_net_pay()\n\n\ndo_all()"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#concluding-observations",
    "href": "modules/M04_PythonFunctions/M04-07-FunctionsCallingFunctions.html#concluding-observations",
    "title": "NB: Functions Calling Functions",
    "section": "Concluding Observations",
    "text": "Concluding Observations\n\nNotice how each example has functions that build on each other.\nThese functions share both data and a general goal.\nThe fact that data and functions go together is the motivation for creating classes."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-Quiz.html#q2",
    "href": "modules/M04_PythonFunctions/M04-Quiz.html#q2",
    "title": "Q1",
    "section": "Q2",
    "text": "Q2\n(1.0 points) True or False: Default arguments must follow non-default arguments.\nA. True\nB. False"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-Quiz.html#q3",
    "href": "modules/M04_PythonFunctions/M04-Quiz.html#q3",
    "title": "Q1",
    "section": "Q3",
    "text": "Q3\n(1.0 points) Python functions require a return statement\nA. True\nB. False"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-Quiz.html#q4",
    "href": "modules/M04_PythonFunctions/M04-Quiz.html#q4",
    "title": "Q1",
    "section": "Q4",
    "text": "Q4\n(1.0 points) Consider this function:\ndef commute_to_work(w, x):\n    a = 10\n    out = a * w + x\n    return out\nFor all given values of c and d, where c and d are NOT EQUAL, do the following function calls produce equivalent results?\nA. yes\nB. no\nC. cannot be determined"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-Quiz.html#q5",
    "href": "modules/M04_PythonFunctions/M04-Quiz.html#q5",
    "title": "Q1",
    "section": "Q5",
    "text": "Q5\n(1.0 points) Functions should (select all that apply):\nA. Do one thing\nB. Have a good name\nC. Contain a docstring\nD. Be shorter than ten lines in length"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-Quiz.html#q6",
    "href": "modules/M04_PythonFunctions/M04-Quiz.html#q6",
    "title": "Q1",
    "section": "Q6",
    "text": "Q6\n(1.0 points) What does this return? (lambda x: 1 - x%2)(5)\nA. an error\nB. 1\nC. 5\nD. 0"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-Quiz.html#q7",
    "href": "modules/M04_PythonFunctions/M04-Quiz.html#q7",
    "title": "Q1",
    "section": "Q7",
    "text": "Q7\n(1.0 points) What does this code block print?\ndef gamma(x):\n    if x < 10:\n        return(0)\n    elif x == 10:\n        return(x**2)\n    return(1)\ny = gamma(20)\nprint(y)\nA. 0\nB. 400\nC. 1\nD. an error"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-Quiz.html#q8",
    "href": "modules/M04_PythonFunctions/M04-Quiz.html#q8",
    "title": "Q1",
    "section": "Q8",
    "text": "Q8\n(1 point) Recursive functions can often be replaced by code blocks that use a looping operation (e.g. for or while statement).\nA. True\nB. False"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-Quiz.html#q9",
    "href": "modules/M04_PythonFunctions/M04-Quiz.html#q9",
    "title": "Q1",
    "section": "Q9",
    "text": "Q9\n(1 point) Which of the following are good reasons to define groups of functions that call each other and share data?\nA. Functions often are designed to solve a common problem.\nB. Complex functions should be broken up into simpler and reusable functions\nC. Functions often perform different roles in a program, such as apply a mathematical formula or interact with a user.\nD. Functions must return values, and these values need to be used somehow"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-Quiz.html#q10",
    "href": "modules/M04_PythonFunctions/M04-Quiz.html#q10",
    "title": "Q1",
    "section": "Q10",
    "text": "Q10\n(1 point) Which of the following are true statements about how Python handles variable scope in functions?\nA. Functions can never see variables defined outside of them.\nB. Unless a variable is declared to be global within a function, a variable is considered local to a function if that variable is assigned a value in the function.\nC. Code outside of a function may see variables defined inside of a function.\nD. A name, such as x , can refer to many different variables in a program."
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html",
    "href": "modules/M04_PythonFunctions/M04-HW.html",
    "title": "M04 Homework",
    "section": "",
    "text": "Instructions\nIn your private course repo on Rivanna, write a Jupyter notebook running Python that performs the numbered tasks below.\nFor each task, create one or more code cells to perform the task.\nSave your notebook in the M04 directory as hw04.ipynb.\nAdd and commit these files to your repo.\nThen push your commits to your repo on GitHib.\nBe sure to fill out the Student Info block above.\nTo submit your homework, save the notebook as a PDF and upload it to GradeScope, following the instructions.\nTOTAL POINTS: 14\nIn this homework, you will work with the Forest Fires Data Set from UCI.\nThere is a local copy of these data as a CSV file in the HW directory for this module in the course repo.\nYou will create a group of related functions to process these data.\nThis notebook will set the table for you by importing and structuring the data first.\nFirst, we read in our local copy of the dataset and save it as a list of lines.\nThen, we inspect first ten lines, replacing commas with tabs for readability.\nFor the first tasks, we grab the first two columns of our table, which define the spatial coordinates within the Monteshino park map.\nNext, we work the area column of our data.\nThe month column contains months of the year in abbreviated form — jan to dec.\nDMC - DMC index from the FWI system: 1.1 to 291.3\nFFMC - FFMC index from the FWI system: 18.7 to 96.20"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#convert-csv-into-datafame-like-data-structure",
    "href": "modules/M04_PythonFunctions/M04-HW.html#convert-csv-into-datafame-like-data-structure",
    "title": "M04 Homework",
    "section": "Convert CSV into Datafame-like Data Structure",
    "text": "Convert CSV into Datafame-like Data Structure\nWe use a helper function to convert the data into the form of a dataframe-like dictionary.\nThat is, we convert a list of rows into a dictionary of columns, each cast to the appropriate data type.\nLater, we will use Pandas and R dataframes to do this work.\nFirst, we define the data types by inspecting the data and creating a dictionary of lambda functions to do our casting.\n\ndtypes = ['i', 'i', 's', 's', 'f', 'f', 'f', 'f', 'f', 'i', 'f', 'f', 'f']\n# dtypes = list(\"iissfffffifff\") # We could have done it this way, too\n\ncaster = {\n    'i': lambda x: int(x),\n    's': lambda x: str(x),\n    'f': lambda x: float(x)\n}\n\nNext, we grab the column names from the first row or list.\nNote that .strip() is a string function that removes extra whitespace from before and after a string.\n\ncols = data_file[0].strip().split(',')\n\nFinally, we iterate through the list of rows and flip them into a dictionary of columns.\nThe key of each dictionary element is the columns name, and the value is a list of values with a common data type.\n\n# Get the rows, but not the first, and convert them into lists\nrows = [line.strip().split(',') for line in data_file[1:]]\n\n# Initialize the dataframe by defining a dictionary of lists, with each column name as a key\nfiredata = {col:[] for col in cols}\n\n# Iterate through the rows and convert them to columns \nfor row in rows:\n    for j, col in enumerate(row):\n        firedata[cols[j]].append(caster[dtypes[j]](col))\n\nTest to see if it worked …\n\nfiredata['Y'][:5]\n\n[5, 4, 4, 6, 6]"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-1",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-1",
    "title": "M04 Homework",
    "section": "Task 1",
    "text": "Task 1\n(2 points)\nWrite a function called coord_builder() with these requirements:\n\nTakes two lists, X and Y, as inputs. X and Y must be of equal length.\nReturns a list of tuples [(x1,y1), (x2,y2), ..., (xn,yn)] where (xi,yi) are the ordered pairs from X and Y.\nUses the zip() function to create the returned list.\nUse a list comprehension to actually build the returned list.\nContains a docstring with short description of the function.\n\n\n# CODE HERE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-2",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-2",
    "title": "M04 Homework",
    "section": "Task 2",
    "text": "Task 2\n(1 PT)\nCall your coord_builder() function, passing in X and Y.\nThen print the first ten tuples.\n\n# CODE HERE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-3",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-3",
    "title": "M04 Homework",
    "section": "Task 3",
    "text": "Task 3\n(1 PT)\nWrite code to print the minimum area and maximum area in a tuple (min_value, max_value).\nSave min_value and max_value as floats.\n\n# CODE HERE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-4",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-4",
    "title": "M04 Homework",
    "section": "Task 4",
    "text": "Task 4\n(2 PTS)\nWrite a lambda function that applies the following function to \\(x\\):\n\n\\(log_{10}(1 + x)\\)\n\nReturn the rounded value to \\(2\\) decimals.\nAssign the function to the variable mylog10.\nThen call the lambda function on area and print the last 10 values.\nHints: * Use the log10 function from Python’s math module. You’ll need to import it. * Use a list comprehension to make the lambda function a one-liner. * To get the last members of a list, used negative offset slicing. See the Python documentation on lists for a refresher on slicing.\n\n# CODE HERE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-5",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-5",
    "title": "M04 Homework",
    "section": "Task 5",
    "text": "Task 5\n(1 PT)\nCreate a function called get_uniques() that extracts the unique values from a list. * Do not use set() but instead use a dictionary comprehension to capture the unique names. * Hint: They keys in a dictionary are unique. * Hint: You do not need to count how many times a name appears in the source list.\nThen function should optionally return the list as sorted in ascending order.\nThen apply it to the month column of our data with sorting turned on.\nThen print the unique months.\n\n# CODE HERE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-6",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-6",
    "title": "M04 Homework",
    "section": "Task 6",
    "text": "Task 6\n(1 PT)\nWrite a lambda function called get_month_for_letter that uses a list comprehension to select all months starting with a given letter from the list of unique month names you just crreated.\nThe function should assume that the list of unique month names exists in the global context.\nThe returned list should contain uppercase strings.\nRun and print the result with a as the paramter.\n\n# CODE HERE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-7",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-7",
    "title": "M04 Homework",
    "section": "Task 7",
    "text": "Task 7\n(2 PTS)\nWrite a function called bandpass_filter() with these requirements:\n\nTakes three inputs:\n\nA list of numbers num_list.\nAn integer serving as a lower bound lower_bound.\nAn integer serving as an upper bound upper_bound.\n\nReturns a new array containing only the values from the original array which are greater than lower_bound and less than upper_bound.\n\n\n# CODE HERE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-8",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-8",
    "title": "M04 Homework",
    "section": "Task 8",
    "text": "Task 8\n(1 PT)\nCall bandpass_filter() passing dmc as the list, with lower_bound=25 and upper_bound=35.\nThen print the result.\n\n# CODE HERE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-9",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-9",
    "title": "M04 Homework",
    "section": "Task 9",
    "text": "Task 9\n(2 PTS)\nWrite a lambda function get_mean that computes the mean \\(\\mu\\) of a list of numbers. * The mean is jus the sum of a list of numeric values divided by the length of that list.\nWrite another lambda function get_ssd that computes the squared deviation of a number. * The function takes two arguments, a number from a given list and the mean of the numbers in that list. * The function is meant to be used in a for-loop that iterates through a list. * The squared deviation of a list element \\(x_i\\) is \\((x_i - \\mu)^2\\).\nThen write get_sum_sq_err() with these requirements: * Takes a numeric list as input. * Computes the mean \\(\\mu\\) of the list using get_mean. * Computes the sum of squared deviations for the list using a list comprehension that applies get_ssd. * Returns the sum of squared deviations.\n\n# CODE HERE"
  },
  {
    "objectID": "modules/M04_PythonFunctions/M04-HW.html#task-10",
    "href": "modules/M04_PythonFunctions/M04-HW.html#task-10",
    "title": "M04 Homework",
    "section": "Task 10",
    "text": "Task 10\n(1 PT)\nCall sum_sq_err() passing ffmc as the list and print the result.\n\n# CODE HERE"
  }
]