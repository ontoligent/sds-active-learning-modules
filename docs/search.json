[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DS 1001 Active Learning Modules",
    "section": "",
    "text": "Preface\nThis site contains three active learning modules for an introductory undergraduate course on programming for data science.\nThese modules have been developed as part of the Data Science Active Learning Lab (DSALL) project, sponsored by the President and Provost’s Fund for Institutionally Related Research at UVA. The project is headed by Professor Brian Wright, in collaboration with Professor Pete Alonzi, of the School of Data Science at UVA.\n\n\nMotivation and Design\nDSALL is motivated by the observation that active learning approaches (AL) have not been widely applied and tested in data science courses, even though a body of significant research demonstrates the benefits of AL and many instructors of computer science have adopted AL successfully.\nA key element of AL is the design, development, and testing of authentic and transparent assessments.\nAuthentic assignments ask students to either inhabit a role seen in the discipline or do the work of the discipline.\nTransparent assignments explicity state their purpose, tasks, and criteria. Research has shown that transparent assignments improve a wide range of student success metrics, including a sense of belonging which can be a significant factor in the retention of underrepresented student populations, particularly in STEM.\nA major obstacle to creating authentic and transparent active learning assessments is the time and effort required to develop, implement, and test them. DSALL will provide the resources and structure necessary for collaborative course development. The Lab will enable faculty and graduate students to work together to develop and empirically test active learning activities in their data science courses. This will result in the identification and validation of best practices along with practical tools that can be shared broadly and openly across the field of Data Science.\nThe Lab will reduce the time burden on faculty to create effective assessments. More important, it will establish a trusted research framework and tools that have been empirically tested for effectiveness. Such a resource is currently unavailable in data science pedagogy. We also have a unique opportunity, given the newness of the field, to develop cultural norms around teaching that are known to benefit underrepresented groups and first-generation students. This funding will go a long way to advance that effort by establishing a pedological research lab specifically focused on student success in a historically fast-growing field."
  },
  {
    "objectID": "rubric.html#project-description",
    "href": "rubric.html#project-description",
    "title": "Rubric Active Learning Lab Sessions",
    "section": "Project Description",
    "text": "Project Description\nActive learning approaches have not been widely applied and tested in data science courses despite significant research supporting their benefits and its successful adoption in computer science. One study notes a 33% increase in pass rates for computer science courses employing active learning as compared to traditional lecture classes [3]. The Academy for Teaching Excellence has thousands of resources to aid in the teaching of computer science content with hundreds of assignments, but essentially no empirically tested resources for data science [4].\nA key component of the active learning approach is the design, development, and testing of authentic and transparent assessments. Authentic assignments asks students to either inhabit a role seen in the discipline or do the work of the discipline. Transparent assignments explicity state their purpose, tasks, and criteria. Research has shown that transparent assignments improve a wide range of student success metrics, including a sense of belonging which can be a significant factor in the retention of underrepresented student populations, particularly in STEM.\nA major obstacle to creating authentic and transparent active learning assessments is the time and effort required to develop, implement, and test them. The Data Science Active Learning Lab will provide the resources and structure necessary for collaborative course development. The Lab will enable faculty and graduate students to work together to develop and empirically test active learning activities in their data science courses. This will result in the identification and validation of best practices along with practical tools that can be shared broadly and openly across the field of Data Science.\nThe Lab will reduce the time burden on faculty to create effective assessments. More important, it will establish a trusted research framework and tools that have been empirically tested for effectiveness. Such a resource is currently unavailable in data science pedagogy. We also have a unique opportunity, given the newness of the field, to develop cultural norms around teaching that are known to benefit underrepresented groups and first-generation students. This funding will go a long way to advance that effort by establishing a pedological research lab specifically focused on student success in a historically fast-growing field."
  },
  {
    "objectID": "rubric.html#project-goals",
    "href": "rubric.html#project-goals",
    "title": "Rubric Active Learning Lab Sessions",
    "section": "Project Goals",
    "text": "Project Goals\nIn pursuit of the mission to provide resources to enable faculty to create effective active learning assessments for data science, the project has the following goals.\n\nBe a preeminent resource for empirically tested best practices in data science education.\nEstablish a testing and validation framework for data science oriented active learning tools.\nCreate and socialize teaching norms in data science that are proven to benefit underrepresented groups and first-generation students.\nDevelop and test active learning assessments (labs) specifically for courses in the proposed data science undergraduate major. (Projected courses include the Foundation of Data Science, Foundations of Machine Learning, Computation Probability, Data Science Ethics and Policy, and Data Science Systems.)\nDisseminate open instructional content in accordance with the School of Data Science open access policy and UVA’s Open Scholarship agreement."
  },
  {
    "objectID": "rubric.html#summer-2023",
    "href": "rubric.html#summer-2023",
    "title": "Rubric Active Learning Lab Sessions",
    "section": "Summer 2023",
    "text": "Summer 2023\nThe goal of the summer is for each faculty member to create three implementable active learning sessions that can be embedded into classes in the next academic year.\nThese active learning sessions should include the following materials covering a roughly two-week period:\n\nSummary of the learning objectives for the session.\n\nPre-reading and/or video material.\n\nTwo Active learning lecture sessions and associated material\n\nAssessments – assignments, reflections, quizzes, group work etc.\n\nEvaluation rubrics for learning outcomes.\n\nReview process to encourage retention.\n\nEach of these items are explained in more detail below."
  },
  {
    "objectID": "rubric.html#materials",
    "href": "rubric.html#materials",
    "title": "Rubric Active Learning Lab Sessions",
    "section": "Materials",
    "text": "Materials\n\nLearning Goals\nLearning goals should be the overarching goals of the class to which learning objectives could then align.\nExamples of Learning Goals for a Machine Learning Class might be:\n\nBe able to describe and execute the necessary steps to prepare data for machine learning models.\nDemonstrate understanding of the mathematical and computation machine requirements for several machine learning approaches and when they should be used.\nDemonstrate understanding of effective evaluation methods given different machine learning approaches.\n\n\n\nI. Learning Objectives.\nLearning Session: Data Preparation 1\nLearning Objectives:\n1.1a) Describe the reasons for and effectively demonstrate partitioning a dataset into train, test and tune.\n2.1a) Effectively describe and demonstrate why it is necessary to one-hot encode factor and standardize continuous variables specific to various machine learning models.\n3.1a) Execute and effectively describe dealing with missing data\n\n\nII. Pre-Reading and/or Video Material\nThis should reference specific sections in books known to be of high quality related to the content. I have a tendency to lean more heavily on books that include “theory” explanations aside from simple how-to text given that much of the how-to will be provided in the class.\nVideos can be very simple explaining the topics through presentation materials or code at a high level. I would work to limit the length of videos to 10 minutes or less and if several topics are covered break them into individual video segments. As a technic to consider, I often build a “stop and think” question in the video that I then discuss at the beginning of class to encourage students to watch and engage with the content. I also usually place these videos on YouTube as unlisted, but this does still allow you to track the watch time.\n\n\nIII. Active Learning Sessions\nThe definition of active learning is fairly broad, but in it’s simplest form it suggests that students should not be passive in their learning. This doesn’t eliminate classical lecturing methods but augments them to include directed moments when students are either engaging with each other or with the professor in more robust way than a traditional Q and A session. An example that Pete and I use a lot is “think, pair, share”. This includes use asking a question, having the students think on the answer alone, then discussing with a partner and then finally sharing with the class as a team. A good book on methods on Teaching Methods provided by CTE is Teaching at its Best by Linda B. Nelson, I’ve got a copy and can purchased more if needed (also please feel free to share other references).\nAs a reference I found this quote from a 2021 paper focused on developing a framework for active learning helpful: “To clarify, we synthesized a working definition of active learning that operates within an elaborative framework, which we call the construction-of-understanding ecosystem. A cornerstone of this framework is that undergraduate learners should be active agents during instruction and that the social construction of meaning plays an important role for many learners, above and beyond their individual cognitive construction of knowledge.”\nThe article is available here: https://journals.sagepub.com/doi/pdf/10.1177/1529100620973974\n\n\nIV. Assessments\nAssessments can be the hardest and potentially the most time-consuming portion of course materials. The traditional path in most Data Science oriented classes is an assessment that focuses on implementing a method in code. I would encourage you to continue this practice but also consider adding written or verbal approaches to evaluating learning. This might include prompts in the coding assessments that require further written explanations or reflections on what was the most challenging/enjoyable portion of the assignment or what areas the students believe they need more practice. This information can then be used in a follow-up session that highlights the areas that a majority of students saw as needing more coverage. It is also important to create clear expectations on how the assessment will be evaluated and what the expectations are for the assessment. Below is an example assessment Pete developed for the DS 1001, though not a coding-based assessment the general structure is still relevant.\n\n\nV. Evaluation rubrics for learning outcomes\nThis step can likely be included in the development of assessments but having it as a standalone emphasizes the need for thoughtful design.\nThe goal here should be evaluation measures tailored to the assessments but also universal enough to be used in a standard lecture format.\nMeaning that the rubrics will be included as part of the experimental design to assess the variances in learning that occurs in an active learning environment when compared to a lecture format.\nIn the above example the quality of answers to the final question, “How do the answers to the questions make you feel as it relates to the presence of data driven technologies in our everyday lives?”, could be a focus on the evaluation rubric as it relates to the specific learning outcome around “understanding the growing influence of data on society”.\n\n\nVI. Review process to encourage retention – The idea here is to\nnot compartmentalize the learning objectives but blend them together from week to week to help reinforce the topics throughout the semesters.\nOne method example is to have quizzes that include questions from all weeks in the class not just the current topic. I think for this use case, simple direct sessions that are short in nature, 10-15 minutes, that review topics from the session makes more sense.\nExamples might include a guided back and forth on the key topics from the previous week or a team assignment that is short in nature but requires the students to pull previous information forward.\nIf the previous week’s topic was Decision Trees, I’ve shown some code and an image of DT in class that had three errors and ask the students to find and describe the errors in 10 minutes, as an example, before moving into the new session for the week."
  },
  {
    "objectID": "rubric.html#additional-notes",
    "href": "rubric.html#additional-notes",
    "title": "Rubric Active Learning Lab Sessions",
    "section": "Additional Notes",
    "text": "Additional Notes\n\nWe want to publish these materials online, so when building please consider the goal is to make the materials publicly available.\nWe are also hoping to “empirically” test these in a classroom in the Spring of 24, so also be thinking about the development of non-active learning materials and where best to measure results.\nYou’ve got great ideas, this is just a framework, so feel free to move as you see fit.\nThis process should be useful for future and current SDS faculty. So, keep an eye on the ideal that we are in some ways culture building/establishing best practices, which I hope gets noticed.\nPete and I will create a Team site with folders for your content and as a placeholder for documentation on the project. You do not need to use these folders, just an option."
  },
  {
    "objectID": "rubric.html#appendix-look-rubric-for-assessment-design",
    "href": "rubric.html#appendix-look-rubric-for-assessment-design",
    "title": "Rubric Active Learning Lab Sessions",
    "section": "Appendix: LOOK Rubric for Assessment Design",
    "text": "Appendix: LOOK Rubric for Assessment Design\nDS 1001 – Spring 2023 - Professors Alonzi & Wright\nDue Date Target: Noon, April 28; Due date final: Noon, May 10 (last day of reading days)\nSubmission format: File upload to canvas\nIndividual Assignment\nGeneral Description: This assignment is all about understanding the systems behind popular social media and content apps. You will select a popular app, like Instagram or Netflix, and do a deep dive on the systems behind it that keep it running. Then you will produce a short report detailing the goal of the app, the software needs to make it work, and the hardware required to make it so. This will focus on the business side. Imagine you are the Chief Data and Technical officer for the company and producing a report for the Chief Executive and Operations officers.\nPreparatory Assignments: READ #7-9 and Labs #7-9.\nWhy am I doing this? In the systems portion of this course, we have been studying hardware and software as well as understanding the scale involved. This assignment puts you in the position of a company that delivers a product at scale through an app. You will need to understand the goal of the company and then the necessary software and hardware to make that happen. This process of studying a company and thinking through their needs will reinforce the learning about hardware, software, and scale.\n\nLO: Identify the hardware and software components of a computer and describe their function\nLO: Describe the different scales of computer operation\n\nWhat am I going to do? First you will select a company to study, choosing from the list of Instagram, Facebook, Twitter, or Netflix (if there is another you would like to do get clearance from a professor first). Once you have that chosen you will figure out what it takes to power their app. Put another way you will determine the goal, not the business goal of “make more money”, but the technical goal. For example, Netflix streams video content. Then you will research the software and hardware needs of the company to achieve that goal. Finally once you have done that research you will produce a short report detailing the various components.\nTips for success:\n\nPick an app that you use.\nTake this opportunity to learn more about something you use, be curious.\nOften apps are very different in different locations, for this assignment you can simplify and stick to the US market.\nThink about yourself and the goal of college. What software do you need to use? What hardware does that software require? Taking a few minutes to think that out can help focus you for the assignment.\n\nHow will I know I have succeeded? I will meet spec when I follow the criteria in this rubric.\n\n\n\nSpec Category\nSpec Details\n\n\n\n\nFormatting\n\nSubmit a single PDF.\n\nGive it a header stating the assignment.\n\n\n\n“Look Ahead assignment – Systems.”\nName, course, date\n\n3 page maximum, including tables and figures.\nExecutive Summary\nGoal statement\nSoftware requirements\nHardware requirements\nReferences\n\n\n\nExecutive Summary\n\nGoal: A short declarative sentence or two describing the contents of the report and the major takeaways.\nList the components of the report.\nState the key figures and scale.\nHighlight any major takeaways the reader should look out for.\n\n\n\n\nGoal Statement\n\nGoal: This is a short paragraph describing the technical goal the app is trying to achieve, for example Netflix streams video.\nInclude the scale involved, how much data is stored, how much computing power is needed, etc.\nThis is not a detailed description, just a coherent statement of the mission\n\n\n\nSoftware Requirements\n\nGoal: Present a detailed description of the software used to achieve the goal.\nThis is a major section of the assignment and is about half of the length of the assignment.\nMention the major software components and their needs.\nInclude a table summarizing the software needs.\nInclude a visualization of the software needs\n\n\n\nHardware Requirements\n\nGoal: Present a detailed description of the hardware used to achieve the goal.\nThis is a major section of the assignment and is about half of the length of the assignment.\nMention the major hardware components of the system.\nInclude a table summarizing the hardware.\nInclude a visualization summarizing the hardware.\n\n\n\nReferences\n\nAll references should be listed at the end of the document\nUse IEEE Documentation style (link)\n\n\n\n\nAcknowledgements: Special thanks to Jess Taggart from UVA CTE for coaching us. This structure is from Streifer & Palmer (2020)."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html",
    "title": "Module: Using Python",
    "section": "",
    "text": "Learning Goals\nAfter completing this module, the student should:\nIn terms of specific knowledge, skills, and abilities, after completing this module students should be able to:\nIn this activity, you will run Python from the command line and become acquainted with its most basic mode of operation.\nTo get started, log onto the Rivanna shell and move into in the course directory you created for this class.\nNow that we have run Python on Rivanna from the command line, let’s try it using a Jupyter Notebook.\nGo the OnDemand site to access Rivanna. As a reminder, the URL is https://rivanna-portal.hpc.virginia.edu/.\nFrom the Interactive Apps menu, select JupyterLab and fill out the form to initiate a new session. Your form should have the following values:\nOnce the session is ready, launch the notebook.\nOnce you are in the notebook, use file system tab on the left to get to the directory of your personal assessments repo. Remember, you created two repos for this class — one for course content from the instructor, and one for your own course work. Use the latter for this exercise.\nIn a code cell in the notebook, enter the code to print \"Hello, World!\", and run the cell.\nSave your notebook as hello-world.ipynb.\nQ1. Which of the following are valid ways to run lines of Python code?\nA. From within the GitHub website, by clicking on a Jupyter notebook.\nB. From the command line, by typing in python, pressing return, and then interactively entering the lines.\nC. From within a code cell in a Jupyter notebook running on Jupyter Lab.\nD. From a text file, with a .py extension. as an argument to calling Python from the command line."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#which-python",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#which-python",
    "title": "Module: Using Python",
    "section": "Which Python?",
    "text": "Which Python?\nOnce you are in Rivanna, you will want to know which version of Python you have installed as the default.\nTo find out, from the command line type:\nwhich python\nThis will show you the “path” to a python interpreter. For example:\n\nIf you do not see “anaconda” in that path, then run the following command:\nmodule load anaconda\nThis will update your environment to use Anaconda’s distribution of Python.\nAfter running the command, enter the command to see which pythion is being used to confirm that it is the one from Ancaconda."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#aside",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#aside",
    "title": "Module: Using Python",
    "section": "Aside",
    "text": "Aside\nNote that you can use module to run other programs on your Rivanna account.\nType module list to see which programs have already been installed on your account.\nType module spider to see all the programs you can install."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#the-python-interactive-shell",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#the-python-interactive-shell",
    "title": "Module: Using Python",
    "section": "The Python Interactive Shell",
    "text": "The Python Interactive Shell\nFrom the command line, enter python\nYou should get the Python Shell:\n\nThis is also called the Python standard REPL, which stands for “Read-Eval-Print Loop”.\nMake sure you see that you are using version 3 of Python.\nIf you see Python 2, exit the shell by entering quit() and try again by entering python3 at the command line.\nAt the >>> prompt type print(\"Hello, World!\") and press return.\nIf you’ve never used Python, you’ve just completed an important ritual. If you have used Python, well, you did it again :-)"
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#try-this",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#try-this",
    "title": "Module: Using Python",
    "section": "Try this",
    "text": "Try this\nNow, enter following line at the prompt and press return:\nimport this\nWhat do you see?\nTo exit the Python Shell, enter quit() or exit() and hit return."
  },
  {
    "objectID": "modules/M02_BasicPython/M02A-UsingPython.html#running-python-files",
    "href": "modules/M02_BasicPython/M02A-UsingPython.html#running-python-files",
    "title": "Module: Using Python",
    "section": "Running Python Files",
    "text": "Running Python Files\nNow create a file called hello.py using the command line editor nano. Enter the same commands you used above.\nThen run it from the command line by directly invoking the Python interpreter python."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html",
    "title": "Module: Variables and Data",
    "section": "",
    "text": "Learning Goals\nFor reference: - Built-in Types (Official)\nClick on the link below to open a web page that contains a slide deck with exercises.\nFor each exercise, read the prompt and attempt to provide an answer, usually in the form of code.\nSee the answers by clicking the down arrow in the lower right corner.\nGo to the next exercise prompt by clicking on the right arrow.\nCreate a new notebook to store your work.\nExercise Slides\nTo finish this module, complete this homework assignment."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#reading-data-and-code",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#reading-data-and-code",
    "title": "Module: Variables and Data",
    "section": "Reading: Data and Code",
    "text": "Reading: Data and Code\nCode should be simple\nAn important principle for writing effective and intelligible code is that code should be simple — to quote Einstein, as simple as possible but no simpler.\n\nA contributing factor to code simplicity is how it is related to the data it is designed to process.\nThis relationship depends largely on how the data are structured.\nA program is always written with data in mind — what kind of data it is and how it is structured.\n\nSimplicity of code follows from the structure of data\nThere is a view among programmers which, although not orthodoxy, is commonplace.\n\nIt is the idea that the complexity of a program — its algorithms — is a function of the quality of the data structure it processes.\nIf a data structure is not well designed, algorithms may be excessively complex and hard to understand.\nHowever if a data structure is well designed, the algorithms that process them are more robust and intelligible.\n\nSupporting References\nConsider these quotes cited in an essay on Data Structures. by Igor Budasov, reproduced here:\nHere’s a quote from Linus Torvalds in 2006:\n\nI’m a huge proponent of designing your code around the data, rather than the other way around, and I think it’s one of the reasons git has been fairly successful . . . I will, in fact, claim that the difference between a bad programmer and a good one is whether he considers his [sic] code or his data structures more important. Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\n\nWhich sounds a lot like Eric Raymond’s “Rule of Representation” from 2003:\n\nFold knowledge into data, so program logic can be stupid and robust.\n\nWhich was just his summary of ideas like this one from Rob Pike in 1989:\n\nData dominates. If you’ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.\n\nWhich cites Fred Brooks from 1975:\n\nRepresentation is the Essence of Programming\n\nBeyond craftsmanship lies invention, and it is here that lean, spare, fast programs are born. Almost always these are the result of strategic breakthrough rather than tactical cleverness. Sometimes the strategic breakthrough will be a new algorithm, such as the Cooley-Tukey Fast Fourier Transform or the substitution of an n log n sort for an n 2 set of comparisons.\n\n\nMuch more often, strategic breakthrough will come from redoing the representation of the data or tables. This is where the heart of your program lies. Show me your flowcharts and conceal your tables, and I shall be continued to be mystified. Show me your tables, and I won’t usually need your flowcharts; they’ll be obvious."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#reading-python-object-types",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#reading-python-object-types",
    "title": "Module: Variables and Data",
    "section": "Reading: Python Object Types",
    "text": "Reading: Python Object Types\nPython is organized into a hierarchy of object types. Sometimes, these are just call types.\nObjects are the basic unit out of which the language is constructed.\nWe’ll learn about objects later – what they are and how to create your own – but for now just understand that they have two main things associated with them:\n\nFirst, they can contain data.\nSecond, they can have behaviors, frequently in relation to the data they contain.\n\n\n\nData Types and Data Structures\nData types and data structures are kinds of objects.\nData types are atomic — they don’t contain other data types.\nData structures contain data types organized in a certain way.\nData Types\n\n\n\nname\ntype\nliteral\n\n\n\n\nint\ninteger\n1\n\n\nstr\nstring\n\"1\", '1'\n\n\nfloat\nfloating point (real)\n1.\n\n\ncomplex\ncomplex\n1j (imaginary component)\n\n\nbool\nboolean\nTrue\n\n\n\nData Structures\n\n\n\nname\nmutable\nconstructor\n\n\n\n\ntuple\nno\n(), tuple()\n\n\nlist\nyes\n[], list()\n\n\ndict\nyes\n{} with key/value pairs, dict()\n\n\nset\nyes\n{} with single values, set()"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#notebooks",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#notebooks",
    "title": "Module: Variables and Data",
    "section": "Notebooks",
    "text": "Notebooks\n\nNumbers\nBooleans\nStrings\nStructures"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q1",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q1",
    "title": "Module: Variables and Data",
    "section": "Q1",
    "text": "Q1\n(1 point) Which of the following are valid ways to run lines of Python code?\nA. From within the GitHub website, by clicking on a Jupyter notebook.\nB. From the command line, by typing in python, pressing return, and then interactively entering the lines.\nC. From within a code cell in a Jupyter notebook running on Jupyter Lab.\nD. From a text file, with a .py extension. as an argument to calling Python from the command line."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q2",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q2",
    "title": "Module: Variables and Data",
    "section": "Q2",
    "text": "Q2\n(1 point) What statement best describes the difference between data types and data structures?\nA. There is no real difference; the expressions are interchangeable.\nB. Data types refer to primitive kinds of data, whereas data structures organize data types into collections with specific organizational properties.\nC. Data types refer to built-in objects, whereas data structures are imported.\nD. Data types don’t have associated operators, whereas data types do."
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q3",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q3",
    "title": "Module: Variables and Data",
    "section": "Q3",
    "text": "Q3\n(1 point) Which of the following items have corresponding Python data types?\nA. Integers\nB. Booleans\nC. Characters (e.g. individual letters)\nD. Reals"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q4",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q4",
    "title": "Module: Variables and Data",
    "section": "Q4",
    "text": "Q4\n(1 point) What built-in Python function returns the object type (i.e. class name) of a value stored in the Python variable x?\nA. class(x)\nB. type(x)\nC. id(x)\nD. ord(x)"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q5",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q5",
    "title": "Module: Variables and Data",
    "section": "Q5",
    "text": "Q5\n(1 point) Which of the following literals would Python interpret as integers? A. 1\nB. 1.\nC. “1”\nD. +1"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q6",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q6",
    "title": "Module: Variables and Data",
    "section": "Q6",
    "text": "Q6\n(1 point) What value does the following expression return: int(1.) == 1\nTrue\nFalse"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q7",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q7",
    "title": "Module: Variables and Data",
    "section": "Q7",
    "text": "Q7\n(1 point) Which are valid constructors of a Python list named x?\nA. x = []\nB. x = list()\nC. x = ()\nD. x = {}"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q8",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q8",
    "title": "Module: Variables and Data",
    "section": "Q8",
    "text": "Q8\n(1 point) Given the list x = [1, 2, 4, 8] what will the expression the following evaluate to? x[1:4]\nA. [1, 2, 4, 8]\nB. [2, 4, 8]\nC. [1, 2, 4]\nD. [1, 4]"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q9",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q9",
    "title": "Module: Variables and Data",
    "section": "Q9",
    "text": "Q9\n(1 point) What value will the following expression evaluate to? [1, 2, 4] * 2\nA. [2, 4, 8]\nB. None # The * operator does not work with lists\nC. [1, 2, 4, 1, 2, 4]\nD. [1, 2, 4, 2]"
  },
  {
    "objectID": "modules/M02_BasicPython/M02B-VariablesAndData.html#q10",
    "href": "modules/M02_BasicPython/M02B-VariablesAndData.html#q10",
    "title": "Module: Variables and Data",
    "section": "Q10",
    "text": "Q10\n(1 point) Which of the following are built-in Python data structures?\nA. list\nB. dict\nC. set\nD. tuple"
  }
]