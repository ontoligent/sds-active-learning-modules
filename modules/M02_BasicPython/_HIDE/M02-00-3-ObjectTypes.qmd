# Reading: Python Object Types

Python is organized into a hierarchy of **object types**. Sometimes, these are just call **types**.

Objects are the basic unit out of which the language is constructed.

We'll learn about objects later -- what they are and how to create your own -- but for now just understand that they have two main things associated with them:

* First, they can contain **data**.
* Second, they can have **behaviors**, frequently in relation to the data they contain.

![](../../media/Python_3._The_standard_type_hierarchy.png)


## Data Types and Data Structures

Data types and data structures are kinds of objects.

**Data types are atomic** &mdash; they don't contain other data types.

**Data structures contain data types** organized in a certain way.

**Data Types**

| name | type | literal |
|------|------|---------|
| `int` | integer | `1` |
| `str` | string | `"1"`, `'1'` |
| `float` | floating point (real) | `1.` |
| `complex` | complex | `1j` (imaginary component) |
| `bool` | boolean | `True` |

**Data Structures**

| name | mutable | constructor |
|------|---------|-------------|
| `tuple` | no | `()`, `tuple()` |
| `list` | yes | `[]`, `list()` |
| `dict` | yes | `{}` with key/value pairs, `dict()`  |
| `set` | yes | `{}` with single values, `set()` |

## About Strings

Strings are data types, but internally they are like data structures.

However, strings can't contain any of the data types specified by Python, so they are unlike the data structures considered here.

Internally, a string is a sequence of Unicode code points, which are not exposed as data types (as they are in some other languages).

- A code point is a numerical value that maps to a specific character.
- Unicode is an international standard of code points that map onto the alphabets of many languages.

Each character is an element in an immutable list-like structure.

You can access it's elements as if it were a tuple of characters: